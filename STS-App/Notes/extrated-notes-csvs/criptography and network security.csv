text
"cryptography and network 
security lecture notes 
for 
bachelor of technology 
in 
computer science and engineering 
& 
information technology 
 
department of computer science and engineering & in formation 
technology 
veer surendra sai university of technology 
(formerly uce, burla) 
burla, sambalpur, odisha 
lecture note prepared by:  prof. d. chandrasekhar r ao 
dr. amiya kumar rath 
      dr. m. r. kabat"
"disclaimer  
 
 
this document does not claim any originality and ca nnot be 
used as a substitute for prescribed textbooks. the information 
presented here is merely a collection by the commit tee 
members for their respective teaching assignments. various 
sources as mentioned at the end of the document as well as 
freely available material from internet were consul ted for 
preparing this document. the ownership of the infor mation 
lies with the respective authors or institutions."
"cryptography and network security 
bcs-         (3-0-1) credit-4 
 
module i         ( 12 lectures) 
 
introduction to the concepts of security: the need for security, security approaches, 
principles of security, types of attacks. cryptogra phic techniques: plain text and cipher 
text, substitution techniques, transposition techni ques, encryption and decryption, 
symmetric and asymmetric key cryptography, steganog raphy, key range and key size, 
possible types of attacks. 
 
module ii         (  8 lectures) 
 
computer-based symmetric key cryptographic algorith ms: algorithm types and modes, 
an overview of symmetric key cryptography, des, int ernational data encryption 
algorithm (idea),  rc5, blowfish, aes, differential  and linear cryptanalysis. 
 
module iii         (  8 lectures) 
 
computer-based asymmetric key cryptography: brief h istory of asymmetric key 
cryptography, an overview of asymmetric key cryptog raphy, the rsa algorithm, 
symmetric and asymmetric key cryptography together,  digital signatures, knapsack 
algorithm, some other algorithms. 
 
module iv         ( 12 lectures) 
 
public key infrastructure: digital certificates, pr ivate key management, the pkix model, 
public key cryptography standards, xml, pki and sec urity. internet security protocols: 
basic concepts, secure socket layer, shttp, time st amping protocol, secure electronic 
transaction, ssl versus set, 3-d secure protocol, e lectronic money, e-mail security, 
wireless application protocol (wap) security, secur ity in gsm.  
 
text books: 
 
1. cryptography and network security – by atul kahate – tmh. 
2. data communications and networking- by behourz a fo rouzan  
 
reference book: 
 
1. cyber security operations handbook – by j.w. rit tiaghouse and william 
     m.hancok – elseviers."
""
"module - i
introduction  
computer data often travels from one computer to another, leaving the safety of its 
protected physical surroundings. once the data is out of hand, people with bad intention could 
modify or forge your data, either for amusement or for their own benefit. 
cryptography can reformat and transform our data, making it safer on its trip between 
computers. the technology is based on the essentials of secret codes, augmented by modern 
mathematics that protects our data in powerful ways. 
•computer security - generic name for the collection of tools designed to protect data and to 
thwart hackers 
•  network security - measures to protect data during their transmission 
•internet security - measures to protect data during their transmission over a collection of 
interconnected networks 
security  attacks, services and mechanisms 
to assess the security needs of an organization effectively, the manager responsible for 
security needs some systematic way of defining the requirements for security and characterization 
of approaches to satisfy those requirements. one approach is to consider three aspects of 
information security: 
security  attack  –  any  action  that  compromises  the  security  of  information owned by an 
organization. 
security  mechanism  –  a  mechanism  that  is  designed  to  detect,  prevent  or recover from a 
security attack. 
security service – a service that enhances the security of the data processing systems and the 
information transfers of an organization. the services are intended to counter security attacks and 
they make use of one or more security mechanisms to provide the service."
"basic  concepts 
cryptography  the art or science encompassing the principles and methods of transforming an 
intelligible message into one that is unintelligible, and then retransforming that message back to its 
original form  
plaintext  the original intelligible message  
cipher text  the transformed message  
cipher  an algorithm for transforming an intelligible message into one that is unintelligible by 
transposition and/or substitution methods  
key some critical information used by the cipher, known only to the sender& receiver  
encipher  (encode) the process of converting plaintext to cipher text using a cipher and a key  
decipher  (decode) the process of converting cipher text back into plaintext using a cipher and a 
key  
cryptanalysis  the study of principles and methods of transforming an unintelligible message 
back into an intelligible message without  knowledge of the key. also called code breaking   
cryptology  both cryptography and cryptanalysis  
code  an algorithm for transforming an intelligible message into an unintelligible one using a 
code-book  
cryptography  
cryptographic systems are generally classified along 3 independent dimensions: 
    type of operations used for transforming plain text to cipher text  
all the encryption algorithms are based on two general principles: substitution , in  which  each  
element  in  the plaintext  is  mapped  into  another  element,  and transposition , in which 
elements in the plaintext are rearranged. 
    the number of keys used  
if the sender and receiver uses same key then it is said to be symmetric key (or)
single key (or) conventional encryption . 
if the sender and receiver use different keys then it is said to be public key encryption . 
    the way in which the plain text is processed  
a block cipher processes the input and block of elements at a time, producing output block for 
each input block."
"a stream cipher processes the input elements continuously, producing output element one at a 
time, as it goes along. 
cryptanalysis  
the process of attempting to discover x or k or both is known as cryptanalysis. the 
strategy used by the cryptanalysis depends on the nature of the encryption scheme and the 
information available to the cryptanalyst. 
there  are  various  types  of  cryptanalytic  attacks  based  on  the  amount  of 
information kno wn to the cryptanalyst. 
   cipher text only – a copy of cipher text alone is known to the cryptanalyst. 
known  plaintext  –  the  cryptanalyst  has  a  copy  of  the  cipher  text  and  the corresponding 
plaintext. 
chosen plaintext – the cryptanalysts gains temporary access to the encryption machine. they 
cannot open it to find the key, however; they can encrypt a large number of suitably chosen 
plaintexts and try to use the resulting cipher texts to deduce the key. 
chosen  cipher  text  –  the  cryptanalyst  obtains  temporary  access  to  the decryption 
machine, uses it to decrypt several string of symbols, and tries to use the results to deduce the 
key. 
steganography  
a plaintext message may be hidden in any one of the two ways. the methods of 
steganography   conceal   the   existence   of   the   message,   whereas   the   methods   of 
cryptography render the message unintelligible to outsiders by various transformations of the text. 
a simple form of steganography, but one that is time consuming to construct is one in 
which an arrangement of words or letters within an apparently innocuous text spells out the 
real message. 
e.g., (i) the sequence of first letters of each word of the overall message spells out the real  
(hidden) message.  
(ii) subset of the words of the overall message is used to convey the hidden 
message. 
various other techniques have been used historically, some of them are 
character marking – selected letters of printed or typewritten text are overwritten in pencil. the"
"marks are ordinarily not visible unless the paper is held to an angle to bright light. 
invisible ink – a number of substances can be used for writing but leave no visible trace until heat 
or some chemical is applied to the paper. 
pin punctures – small pin punctures on selected letters are ordinarily not visible unless the 
paper is held in front of the light. typewritten correction ribbon – used between the lines typed 
with a black ribbon, the results of typing with the correction tape are visible only under a strong 
light. 
drawbacks of steganography 
    requires a lot of overhead to hide a relatively few bits of information. 
    once the system is discovered, it becomes virtually worthless. 
security  services 
the classification of security services are as follows: 
confidentiality:  ensures that the information in a computer system a nd  transmitted 
information are accessible only for reading by authorized parties. 
e.g.  printing, displaying and other forms of disclosure. 
authentication: ensures that the origin of a message or electronic document is correctly 
identified, with an assurance that the identity is not false. 
integrity:  ensures that only authorized parties are able to modify computer system   assets   and   
transmitted   information.   modification   includes   writing, changing status, deleting, creating 
and delaying or replaying of transmitted messages. 
non repudiation : requires that neither the sender nor the receiver of a message be able to deny 
the transmission. 
access control : requires that access to information resources may be controlled by or the target 
system. 
availability : requires that computer system assets be available to authorized parties when 
needed. 
security  mechanisms  
one of the most specific security mechanisms in use is cryptographic techniques. 
encryption or encryption-like transformations of information are the most common means of 
providing security. some of the mechanisms are 
1 encipherment"
"2 digital signature   
3 access control 
security  attacks 
there are four general categories of attack which are listed below. 
interruption  
an asset of the system is destroyed or becomes unavailable or unusable. this is an attack on 
availability e.g.,  destruction  of  piece  of  hardware,  cutting  of  a  communication  line  or 
disabling of file management system.  
interception  
an   unauthorized   party   gains   access   to   an   asset.   this   is   an   attack   on confidentiality.   
unauthorized   party   could   be   a   person,   a   program   or   a 
computer.e.g., wire tapping to capture data in the network, illicit copying of files  
sender                                                       receiver  
eavesdropper or forger  
modification  
an unauthorized party not only gains access to but tampers with an asset. this is an attack on 
integrity. e.g., changing values in data file, altering a program, modifying the contents of 
messages being transmitted in a network.  
sender                                                  receiver"
"eavesdropper or forger  
fabrication  
an unauthorized party inserts counterfeit objects into the system. this is an attack on authenticity. 
e.g., insertion of spurious message in a network or addition of records to a file. 
sender                                                  receiver  
eavesdropper or forger  
cryptographic  attacks 
passive  attacks 
passive attacks are in the nature of eavesdropping on, or monitoring of, transmissions. the goal 
of the opponent is to obtain information that is being transmitted. passive 
attacks are of two types:  
release of message contents: a telephone conversation, an e-mail message and a transferred file 
may contain sensitive or confidential information. we would like to prevent the opponent from 
learning the contents of these transmissions. 
traffic analysis : if we had encryption protection in place, an opponent might still be able to 
observe the pattern of the message. the opponent could determine the location and identity of 
communication hosts and could observe the frequency and length of messages being 
exchanged. this information might be useful in guessing the nature of communication that was 
taking place. 
passive attacks are very difficult to detect because they do not involve any alteration of data. 
however, it is feasible to prevent the success of these attacks."
"active  attacks   
these attacks involve some modification of the data stream or the creation of a false stream. these 
attacks can be classified in to four categories: 
masquerade – one entity pretends to be a different entity. 
replay – involves passive capture of a data unit and its subsequent transmission to produce an 
unauthorized effect. 
modification of messages – some portion of message is altered or the messages are delayed or 
recorded, to produce an unauthorized effect. 
denial  of  service  –  prevents  or  inhibits  the  normal  use  or  management  of communication 
facilities. another form of service denial is the disruption of an entire network, either by disabling 
the network or overloading it with messages so as to degrade performance. 
it is quite difficult to prevent active attacks absolutely, because to do so would require physical 
protection of all communication facilities and paths at all times. instead, the goal is to detect them 
and to recover from any disruption or delays caused by them. 
symmetric  and public key algorithms 
encryption/decryption methods fall into two categories. 
    symmetric key 
    public key 
in symmetric key algorithms, the encryption and decryption keys are known both to sender 
and receiver. the encryption key is shared and the decryption key is easily calculated from it. 
in many cases, the encryption and decryption keys are the same. 
i n    p u b l i c    k ey    c ry p t o g r a p hy ,    e n c ry p t i o n    k e y    i s    m a d e    p u b l i c ,    b u t    i t    i s  
computationally infeasible to find the decryption key without the information known to the 
receiver.  
a model for network security"
"a message is to be transferred from one party to another across some sort of internet. the two 
parties, who are the principals in this transaction, must cooperate for the exchange to take place. 
a logical information channel is established by defining a route through the internet  from  source  
to  destination  and  by  the  cooperative  use  of  communication protocols (e.g., tcp/ip) by the 
two principals. 
using this model requires us to:  
–    design a suitable algorithm for the security transformation 
–    generate the secret information (keys) used by the algorithm 
–    develop methods to distribute and share the secret information 
– specify a protocol enabling the principals to use the transformation and secret information 
for a security service 
model for network access security 
using this model requires us to:"
"–    select appropriate gatekeeper functions to identify users 
–implement   security   controls   to   ensure   only   authorized   users   access designated 
information or resources 
•    trusted computer systems can be used to implement this model  
conventional  encryption 
•    referred conventional / private-key / single-key 
•    sender and recipient share a common key 
all classical encryption algorithms are private-key was only type prior to invention of public-
key in 1970 ‟plaintext - the original message 
some basic terminologies used: 
• cipher text - the coded message 
•  cipher - algorithm for transforming plaintext to cipher text 
•  key - info used in cipher known only to sender/receiver 
•  encipher (encrypt) - converting plaintext to cipher text 
•  decipher (decrypt) - recovering cipher text from plaintext 
•  cryptography - study of encryption principles/methods 
•cryptanalysis (code breaking) - the study of principles/ methods of deciphering cipher text 
without knowing key 
•    cryptology - the field of both cryptography and cryptanalysis"
"here the original message, referred to as plaintext, is converted into apparently random 
nonsense, referred to as cipher text.  the encryption process consists of an algorithm and a key. 
the key is a value independent of the plaintext. changing the key changes the output of the 
algorithm.  once the cipher text is produced, it may be transmitted. upon reception, the 
cipher text can be transformed back to the original plaintext by using a decryption algorithm 
and the same key that was used for encryption. the security depends on several factors. first, the 
encryption algorithm must be powerful enough that it is impractical to decrypt a message on 
the basis of cipher text alone. beyond that, the security depends on the secrecy of the key, 
not the secrecy of the algorithm. 
•    two requirements for secure use of symmetric encryption:  
–    a strong encryption algorithm 
–    a secret key known only to sender / receiver 
y = ek(x) 
x = dk(y) 
•    assume encryption algorithm is known  
•    implies a secure channel to distribute key  
a source produces a message in plaintext, x = [x1, x2… xm] where m are the number of 
letters in the message.  a key of the form k = [k1, k2… kj] is generated. if the key is 
generated at the source, then it must be provided to the destination by means of some secure 
channel. 
with the message x and the encryption key k as input, the encryption algorithm forms the 
cipher text y = [y1, y2, yn]. this can be expressed as 
y = e k(x) 
the   intended   receiver,   in   possession   of   the k ey,   is   able   to   invert   the 
transformation: 
x = d k(y) 
an opponent, observing y but not having access to k or x, may attempt to recover 
x or k or both. it is assumed that the opponent knows the encryption and decryption algorithms."
"if the opponent is interested in only this particular message, then the focus of effort is to recover 
x by generating a plaintext estimate.  often if the opponent is interested in being able to read 
future messages as well, in which case an attempt is made to recover k by generating an estimate. 
classical  encryption techniques 
there are two basic building blocks of all encryption techniques: substitution and 
transposition. 
substitution  techniques 
a substitution technique is one in which the letters of plaintext are replaced by other letters or by 
numbers or symbols. if the plaintext is viewed as a sequence of bits, then substitution involves 
replacing plaintext bit patterns with cipher text bit patterns. 
caesar  cipher (or) shift cipher 
the earliest known use of a substitution cipher and the simplest was by julius caesar. the 
caesar cipher involves replacing each letter of the alphabet with the letter standing 3 places 
further down the alphabet. 
e.g., plain text : pay more money 
cipher text: sdb pruh prqhb 
note that the alphabet is wrapped around, so that letter following „z‟ is „a‟. 
for each plaintext letter p, substitute the cipher text letter c such that 
c = e(p) = (p+3) mod 26 
a shift may be any amount, so that general caesar algorithm is 
c = e (p) = (p+k) mod 26 
where k takes on a value in the range 1 to 25. the decryption algorithm is simply 
p = d(c) = (c-k) mod 26 
playfair  cipher 
the best known multiple letter encryption cipher is the playfair, which treats digrams 
in the plaintext as single units and translates these units into cipher text digrams. the playfair"
"algorithm is based on the use of 5x5 matrix of letters constructed using a keyword. let the 
keyword be „monarchy ‟. the matrix is constructed by filling in the letters of the keyword 
(minus duplicates) from left to right and from top to bottom, and then filling in the remainder of 
the matrix with the remaining letters in alphabetical order. 
the letter „i‟ and „j‟ count  as one letter. plaintext is encrypted two letters at a time 
according to the following rules: 
    repeating plaintext letters that would fall in the same pair are separated with a 
filler letter such as „x ‟. 
plaintext letters that fall in the same row of the matrix are each replaced by the letter to the 
right, with the first element of the row following the last. 
plaintext letters that fall in the same column are replaced by the letter beneath, with the top 
element of the column following the last. 
    otherwise, each plaintext letter is replaced by the letter that lies in its own row 
and the column occupied by the other plaintext letter.  
plaintext = meet me at the school house 
splitting two letters as a unit => me et   me at   th es   ch o x  ol   ho  us ex 
corresponding cipher text     => cl kl cl rs pd il hy av mp hf xl iu 
strength of playfair cipher 
    playfair cipher is a great advance over simple mono alphabetic ciphers. 
since there are 26 letters, 26x26 = 676 diagrams are possible, so identification of individual 
diagram is more difficult.  
1.15.1.3  polyalphabetic ciphers m o n a r
c h y b d
e f g i / j  k 
l p q s t
u v w x z"
"another  way  to  improve  on  the  simple  monoalphabetic  technique  is  to  use different 
monoalphabetic substitutions as one proceeds through the plaintext message. the general name 
for this approach is polyalphabetic cipher. all the techniques have the following features in 
common. 
    a set of related monoalphabetic substitution rules are used 
    a key determines which particular rule is chosen for a given transformation. 
vigenere  cipher 
in this scheme, the set of related monoalphabetic substitution rules consisting of 
26 caesar ciphers with shifts of 0 through 25. each cipher is denoted by a key letter. e.g., caesar 
cipher with a shift of 3 is denoted by the key value 'd‟ (since a=0, b=1, c=2 and so on).  to  
aid  in  understanding  the  scheme,  a  matrix  known  as  vigenere  tableau  is 
constructed  
each of the 26 ciphers is laid out horizontally, with the key letter for each cipher to its 
left.  a normal alphabet for the plaintext runs across the top.  the process of 
plain text 
k 
e 
y 
l 
e 
t 
t 
e 
r 
s a b c d e f g h i jk … x y z 
a a b c d e f g h i j k … x y z 
b b c d e f g h i j k l … y z a 
c c d e f g h i j k l m … z a b 
d d e f g h i j k l m n… a b c 
e e f g h i j k l m no … b c d 
f f g h i j k l m no p … c d e 
g g h i j k l m no p q … d e f 
: 
: : 
: : 
: : 
: : 
: : 
: : 
: : 
: : 
: : 
: : 
: : 
: … : 
: : 
: : 
: 
x x y z a b c d e f g h …   w 
y y z a b c d e f g h i …   x 
z z a b c d e f g h i j …   y"
"encryption is simple: given a key letter x and a plaintext letter y, the cipher text is at the 
intersection of the row labeled x and the column labeled y; in this case, the ciphertext is 
v. 
to encrypt a message, a key is needed that is as long as the message. usually, the key is a 
repeating keyword. 
            e.g.,     key      = d e c e p t i v e d e c e p t i v e d e c e p t i v e pt = w e a r e d i s c o v e r e d s a 
v e y o u r s e l f ct = zicvtwqngrzgvtwavzhcqyglmgj 
decryption is equally simple. the key letter again identifies the row. the position of the 
cipher text letter in that row determines the column, and the plaintext letter is at the top of that 
column. 
strength of vigenere cipher 
o there are multiple cipher text letters for each plaintext letter. 
o letter frequency information is obscured. 
one time pad cipher 
it is an unbreakable cryptosystem. it represents the message as a sequence of 0s and 1s. 
this can be accomplished by writing all numbers in binary, for example, or by using ascii. the 
key is a random sequence of 0‟s and 1‟s of same length as the message. once a key is used, it is 
discarded and never used again. the system can be expressed as 
follows:  
ci = pi  ki ci - ith binary digit of cipher text pi - ith binary digit of 
plaintext k i - ith binary digit of key 
   exclusive or operation 
thus the cipher text is generated by performing the bitwise xor of the plaintext and the key. 
decryption uses the same key.  because of the properties of xor, decryption simply involves the 
same bitwise operation: 
pi = ci     ki 
e.g.,     plaintext = 0 0 1 0 1 0 0 1 
key         = 1 0 1 0 1 1 0 0"
"------------------- ciphertext = 1 0 0 0 0 1 0 1 
advantage: 
    encryption method is completely unbreakable for a ciphertext only attack.  
disadvantages 
it requires a very long key which is expensive to produce and expensive to transmit. 
once  a  key  is  used,  it  is  dangerous  to  reuse  it  for  a  second  message;  any knowledge 
on the first message would give knowledge of the second. 
transposition  techniques 
all  the  techniques  examined  so  far  involve  the  substitution  of  a  cipher  text symbol 
for a plaintext symbol. a very different kind of mapping is achieved by performing some sort of 
permutation on the plaintext letters. this technique is referred to as a transposition cipher. 
rail fence   
is simplest of such cipher, in which the plaintext is written down as a sequence of diagonals and 
then read off as a sequence of rows. 
plaintext         = meet at the school house 
to encipher this message with a rail fence of depth 2, we write the message as follows: 
m  e   a  t   e   c  o   l   o   s 
e  t    t    h   s   h   o   h   u   e 
the encrypted message is  
meatecolosetthshohue 
row  transposition ciphers-  
a more complex scheme is to write the message in a rectangle, row by row, and read the 
message off, column by column, but permute the order of the columns. the order of columns then 
becomes the key of the algorithm. 
e.g.,                 plaintext = meet at the school house 
key = 4 3 1 2 5 6 7 
pt   = m e e t a t t"
"h e s c h o o 
l h o u s e  
ct   = esotcueehmhlahstoeto 
a pure transposition cipher is easily recognized because it has the same letter frequencies 
as the original plaintext. the transposition cipher can be made significantly more secure by 
performing more than one stage of transposition. the result is more complex permutation that is 
not easily reconstructed. 
feistel  cipher structure 
the input to the encryption algorithm are a plaintext block of length 2w bits and a key k. 
the plaintext block is divided into two halves l 0 and r 0. the two halves of the data pass 
through „n‟ rounds of processing and then combine to produce the ciphertext block. each round „i‟
has inputs l i-1 and r i-1, derived from the previous round, as well as the subkey k i, derived from 
the overall key k. in general, the subkeys k i  are different from k and from each other. 
all rounds have the same structure.  a substitution is performed on the left half of the data (as 
similar to s-des). this is done by applying a round function f to the right half of the data and 
then taking the xor of the output of that function and the left half of the data. the round function 
has the same general structure for each round but is parameterized by the round sub key k i.  
following this substitution, a permutation is performed that consists of the interchange of the 
two halves of the data. this structure is a particular form of the substitution-permutation network. 
the exact realization of a feistel network depends on the choice of the following parameters and 
design features: 
    block size - increasing size improves security, but slows cipher 
key size - increasing size improves security, makes exhaustive key searching harder, but may 
slow cipher 
    number of rounds - increasing number improves security, but slows cipher 
subkey generation - greater complexity can make analysis harder, but slows cipher 
    round function - greater complexity can make analysis harder, but slows cipher 
fast software en/decryption & ease of analysis - are more recent concerns for practical use 
and testing."
fig: classical feistel network
"fig: feistel encryption and decryption  
the process of decryption is essentially the same as the encryption process. the rule is as follows: 
use the cipher text as input to the algorithm, but use the subkey k i  in reverse order. i.e., k n in 
the first round, k n-1 in second round and so on. for clarity, we use the notation le i and re i for
data traveling through the decryption algorithm.  the diagram below indicates that, at each 
round, the intermediate value of the decryption process is same (equal) to the corresponding value 
of the encryption process with two halves of the value swapped. 
        i.e., re i | |  l ei (or) equivalently rd 16-i | |  l d 16-i"
"after  the  last  iteration  of  the  encryption  process,  the  two  halves  of  the  output  are 
swapped, so that the cipher text is re 16 | |  l e 16. the output of that round is the cipher text. now 
take the cipher text and use it as input to the same algorithm. the input to the first round is re 16 
|| le 16, which is equal to the 32-bit swap of the output of the sixteenth round of the 
encryption process. 
now we will see how the output of the first round of the decryption process is equal to a 
32-bit swap of the input to the sixteenth round of the encryption process. first consider the 
encryption process, 
l e16 = re 15 
re16 = le 15      f (re 15, k16) on the decryption side, 
l d1 =rd 0 = le 16 =re15 
rd1 = ld 0      f (rd 0, k16) 
= re 16      f (re 15, k16) 
= [le 15      f (re 15, k16)]    f (re 15, k16)
= le 15 
therefore,                   ld 1 = re 15 
rd1 = le 15 in general, for the ith iteration of the encryption algorithm, l ei = rei-1
rei = le i-1      f (re i-1, ki) 
finally, the output of the last round of the decryption process is re 0 | |  l e 0. a 32-bit swap 
recovers the original plaintext. 
 block cipher principles 
virtually, all symmetric block encryption algorithms in current use are based on a structure 
referred to as fiestel block cipher. for that reason, it is important to examine the design principles 
of the fiestel cipher. we begin with a comparison of stream cipher with block cipher.  
•a stream cipher is one that encrypts a digital data stream one bit or one byte at a time. e.g, 
vigenere cipher. a block cipher is one in which a block of plaintext is treated as a whole and 
used to produce a cipher text block of equal length. typically a block size of 64 or 128 bits is 
used. module - i i"
"block  cipher principles 
•    most symmetric block ciphers are based on a feistel cipher structure  needed since must be 
able to decrypt ciphertext to recover messages efficiently. block ciphers look like an extremely 
large substitution 
•    would need table of 264 entries for a 64-bit block 
•    instead create from smaller building blocks 
•    using idea of a product cipher in 1949 claude shannon introduced idea of substitu -
tion-permutation (s-p) networks called modern substitution-transposition product cipher 
these form the basis of modern block ciphers 
•s-p networks are based on the two primitive cryptographic operations we have seen before: 
•    substitution (s-box) 
•    permutation (p-box) 
•    provide confusion and diffusion of message 
•    diffusion – dissipates statistical structure of plaintext over bulk of ciphertext 
•confusion  –  makes  relationship  between  ciphertext  and  key  as  complex  as possible 
data  encryption standard (des) 
in may 1973, and again in aug 1974 the nbs (now nist) called for possible encryption 
algorithms for use in unclassified government applications response was mostly disappointing, 
however ibm submitted their lucifer design following a period of redesign and comment it 
became the data encryption standard (des)  
it was adopted as a (us) federal standard in nov 76, published by nbs as a hardware only scheme 
in jan 77 and by ansi for both hardware and software standards in ansi x3.92-1981 (also 
x3.106-1983 modes of use) subsequently it has been widely adopted and is now published in 
many standards around the world cf australian standard as2805.5-1985  
one of the largest users of the des is the banking industry, particularly with eft, and eftpos  
it is for this use that the des has primarily been standardized, with ansi having twice 
reconfirmed its recommended use for 5 year periods - a further extension is not expected however 
although the standard is public, the design criteria used are classified and have yet to be released 
there has been considerable controversy over the design, particularly in the choice of a 56-bit key  
· recent analysis has shown despite this that the choice was appropriate, and that des is well 
designed  
· rapid advances in computing speed though have rendered the 56 bit key susceptible to 
exhaustive key search, as predicted by diffie & hellman"
"· the des has also been theoretically broken using a method called differential 
cryptanalysis, however in practice this is unlikely to be a problem (yet)  
overview of the des encryption algorithm 
 
· the basic process in enciphering a 64-bit data block using the des consists of:  
o an initial permutation (ip)  
o 16 rounds of a complex key dependent calculation f  
o a final permutation, being the inverse of ip  
· in more detail the 16 rounds of f consist of:  
 
· this can be described functionally as"
"l(i) = r(i-1)  
r(i) = l(i-1) (+) p(s( e(r(i-1))(+) k(i) ))  
and forms one round in an s-p network  
· the subkeys used by the 16 rounds are formed by the key schedule  which consists of:  
o an initial permutation of the key (pc1) which selects 56-bits in two 28-bit halves  
o 16 stages consisting of  
o selecting 24-bits from each half and permuting them by pc2 for use in function f,  
o rotating each half either 1 or 2 places depending on the key rotation schedule  ks  
· this can be described functionally as:  
k(i) = pc2(ks(pc1(k),i))  
· the key rotation schedule  ks is specified as:  
   round       1    2   3    4    5    6    7    8    9    10   11   12   13   14   15   16    
     ks        1    1   2    2    2    2    2    2    1    2     2    2   2    2    2    1     
 total rot     1    2   4    6    8    10   12   14   15   17   19   21   23   25   27   28    
· more details on the various des functions can be found in your textbooks  
· following is a walk-through of a des encryption calculation taken from:  
h katzan, ""the standard data encryption algorithm"", petrocelli books, new york, 1977  
des  modes of use 
· des encrypts 64-bit blocks of data, using a 56-bit key  
· we need some way of specifying how to use it in practise, given that we usually have an 
arbitrary amount of information to encrypt  
· the way we use a block cipher is called its mode of use  and four have been defined for the 
des by ansi in the standard: ansi x3.106-1983 modes of use)  
· modes are either:  
block  modes   
splits messages in blocks (ecb, cbc)  
electronic  codebook book (ecb)  
- where the message is broken into independent 64-bit blocks which are encrypted  
c_(i) = des_(k1) (p_(i)) 
cipher  block chaining (cbc)"
"again the message is broken into 64-bit blocks, but they are linked together in the encryption 
operation with an iv c_(i) = des_(k1) (p_(i)(+)c_(i-1)) c_(-1)=iv  
stream  modes   
on bit stream messages (cfb, ofb)  
cipher  feedback (cfb)  
- where the message is treated as a stream of bits, added to the output of the des, with the result 
being feedback for the next stage  
c_(i) = p_(i)(+) des_(k1) (c_(i-1)) c_(-1)=iv  
output  feedback (ofb)  
- where the message is treated as a stream of bits, added to the message, but with the feedback 
being independent of the message  
c_(i) = p_(i)(+) o_(i) o_(i) = des_(k1)(o_(i-1)) o_(-1)=iv  
· each mode has its advantages and disadvantages  
limitations of various modes 
ecb 
· repetitions in message can be reflected in ciphertext  
o if aligned with message block  
o particularly with data such graphics  
o or with messages that change very little, which become a code-book analysis 
problem  
· weakness is because enciphered message blocks are independent of each other"
"cbc 
· use result of one encryption to modify input of next  
o hence each ciphertext block is dependent on all message blocks before it  
o thus a change in the message affects the ciphertext block after the change as well as 
the original block  
 
 
 
to start need an initial value  (iv) which must be known by both sender and receiver 
o however if iv is sent in the clear, an attacker can change bits of the first block, and 
change iv to compensate  
o hence either iv must be a fixed value (as in eftpos) or it must be sent encrypted 
in ecb mode before rest of message"
"· also at the end of the message, have to handle a possible last short block  
o either pad last block (possible with count of pad size), or use some fiddling to 
double up last two blocks  
o see davies for examples  
cfb 
· when data is bit or byte oriented, want to operate on it at that level, so use a stream mode  
· the block cipher is use in encryption  mode at both  ends, with input being a feed-back 
copy of the ciphertext  
· can vary the number of bits feed back, trading off efficiency for ease of use  
· again errors propogate for several blocks after the error"
"ofb 
· also a stream mode, but intended for use where the error feedback is a problem, or where 
the encryptions want to be done before the message is available  
· is superficially similar to cfb, but the feedback is from the output of the block cipher and 
is independent of the message, a variation of a vernam cipher  
· again an iv is needed  
· sender and receiver must remain in sync, and some recovery method is needed to ensure 
this occurs  
· although originally specified with varying m-bit feedback in the standards, subsequent 
research has shown that only 64-bit ofb  should ever be used (and this is the most efficient use 
anyway), see  
d davies, g parkin, ""the average cycle size of the key stream in output feedback 
encipherment"" in advances in cryptology - crypto 82, plenum press, 1982, pp97-98  
 
des weak keys 
· with many block ciphers there are some keys that should be avoided, because of reduced 
cipher complexity  
· these keys are such that the same sub-key is generated in more than one round, and they 
include:  
weak keys 
· he same sub-key is generated for every round  
· des has 4 weak keys  
semi-weak keys 
· only two sub-keys are generated on alternate rounds  
· des has 12 of these (in 6 pairs)"
"demi-semi weak keys 
· have four sub-keys generated  
· none of these cause a problem since they are a tiny fraction of all available keys  
· however they must be avoided by any key generation program  
des  design principles 
although the standard for des is public, the design criteria used are classified and have yet to be 
released. some information is known, and more has been deduced  
l p brown, ""a proposed design for an extended des"", in computer security in the age of 
information, w. j. caelli (ed), north-holland, pp 9-22, 1989  
l p brown, j r seberry, ""on the design of permutation boxes in des type cryptosystems"", in 
advances in cryptology - eurocrypt '89, lecture notes in computer science, vol 434, pp 696-
705, j.j. quisquater, j. vanderwalle (eds), springer-verlag, berlin, 1990.  
l p brown and j r seberry, ""key scheduling in des type cryptosystems,"" in advances in 
cryptology - auscrypt '90, lecture notes in computer science, vol 453, pp 221-228, j. seberry, j. 
pieprzyk (eds), springer-verlag, berlin, 1990.  
will briefly overview the basic results, for more detailed analyses see the above papers  
des s-box design criteria 
each s-box may be considered as four substitution functions  
o these 1-1 functions map inputs 2,3,4,5 onto output bits  
o a particular function is selected by bits 1,6  
o this provides an autoclave feature   
des design criteria 
· there were 12 criterion used, resulting in about 1000  
· possible s-boxes, of which the implementers chose 8  
· these criteria are classified secret  
· however, some of them have become known  
· the following are design criterion:  
r1: each row of an s-box is a permutation of 0 to 15  
r2: no s-box is a linear of affine function of the input  
r3: changing one input bit to an s-box results in changing at least two output bits"
"r4: s(x) and s(x+001100) must differ in at least 2 bits  
· the following are said to be caused by design criteria  
r5: s(x) [[pi]] s(x+11 ef 00) for any choice of e and f  
r6: the s-boxes were chosen to minimize the difference between the number of 1's and 0's in any 
s-box output when any single input is held constant  
r7: the s-boxes chosen require significantly more minterms than a random choice would require  
meyer tables 3-17, 3-18  
des permutation tables 
· there are 5 permutations used in des:  
o ip and ip^(-1) , p, e, pc1, pc2   
· their design criteria are classified secret  
· it has been noted that ip and ip^(-1) and pc1 serve no cryptological function when des 
is used in ecb or cbc modes, since searches may be done in the space generated after they have 
been applied  
· e, p,  and pc2 combined with the s-boxes must supply the required dependence of the 
output bits on the input bits and key bits ( avalanche  and completeness effects)  
ciphertext dependence on input and key 
· the role of p, e, and pc2  is distribute the outputs of the s-boxes so that each output bit 
becomes a function of all the input bits in as few rounds as possible  
· carl meyer (in meyer 1978, or meyer & matyas 1982) performed this analysis on the 
current des design  
ciphertext dependence on plaintext 
· define g_(i,j) a 64*64 array which shows the dependence of output bits x(j) on input bits 
x(i)  
· examine g_(0,j) to determine how fast complete dependence is achieved  
· to build g_(0,1) use the following  
l(i) = r(i-1)  
r(i) = l(i-1) (+) f( k(i), r(i-1))  
· des p reaches complete dependence after 5 rounds  
· []  
ciphertext dependence on key 
· carl meyer also performed this analysis"
"· define f_(i,j) a 64*56 array which shows the dependence of output bits x(j) on key bits 
u(i) (after pc1 is used)  
· examine f_(0,j) to determine how fast complete dependence is achieved  
· des pc2 reaches complete dependence after 5 rounds  
key scheduling and pc2 
· key schedule  
o is a critical component in the design  
o must provide different keys for each round otherwise security may be compromized 
(see grossman & tuckerman 1978)  
o current scheme can result in weak keys which give the same, 2 or 4 keys over the 
16 rounds  
· key schedule and pc-2 design  
o is performed in two 28-bit independent halves  
o c-side provides keys to s-boxes 1 to 4  
o d-side provides keys to s-boxes 5 to 8  
o the rotations are used to present different bits of the key for selection on successive 
rounds  
o pc-2 selects key-bits and distributes them over the s-box inputs  
possible techniques for improving des 
· multiple enciphering with des  
· extending des to 128-bit data paths and 112-bit keys  
· extending the key expansion calculation  
triple  des 
· des variant  
· standardised in ansi x9.17 & iso 8732 and in pem for key management  
· proposed for general eft standard by ansi x9  
· backwards compatible with many des schemes  
· uses 2 or 3 keys  
c = des_(k1) bbc{(des^(-1)_(k2)bbc{(des_(k1)(p))) 
· no known practical attacks"
"o brute force search impossible  
o meet-in-the-middle attacks need 2^(56) pc pairs per key  
· popular current alternative  
idea  (ipes) 
· developed by james massey & xuejia lai at eth originally in zurich in 1990, then called 
ipes :  
· name changed to idea in 1992  
· encrypts 64-bit blocks using a 128-bit key  
· based on mixing operations from different (incompatible) algebraic groups (xor, 
addition mod 2^(16) , multiplication mod 2^(16) +1)  
· all operations are on 16-bit sub-blocks, with no permutations used, hence its very efficient 
in s/w  
· idea is patented in europe & us, however non-commercial use is freely permitted  
· used in the public domain pgp secure email system (with agreement from the patent 
holders)  
· currently no attack against idea is known (it appears secure against differential 
cryptanalysis), and its key is too long for exhaustive search  
overview of idea   
· idea encryption works as follows:  
o the 64-bit data block is divided by 4 into: x_(1) , x_(2) , x_(3) , x_(4)  
o in each of eight the sub-blocks are xord, added, multiplied with one another and 
with six 16-bit sub-blocks of key material, and the second and third sub-blocks are swapped  
o finally some more key material is combined with the sub-blocks"
"· idea sub-keys  
o the encryption keying material is obtained by splitting the 128-bits of key into eight 
16-bit sub-keys, once these are used the key is rotated by 25-bits and broken up again etc  
o the decryption keying material is a little more complex, since inverses of the sub-
blocks need to be calculated  
· the keys used may be summarised as follows:  
round       encryption keys                   decryption keys                         
1           k1.1 k1.2 k1.3 k1.4 k1.5 k1.6     k9.1-1 -k9.2  -k9.3  k9.4-1  k8.5       
                                              k8.6                                    
2           k2.1 k2.2 k2.3 k2.4 k2.5 k2.6     k8.1-1 -k8.3  -k8.2  k8.4-1  k7.5       
                                              k7.6                                    
3           k3.1 k3.2 k3.3 k3.4 k3.5 k3.6     k7.1-1 -k7.3  -k7.2  k7.4-1  k6.5       
                                              k6.6                                    
4           k4.1 k4.2 k4.3 k4.4 k4.5 k4.6     k6.1-1 -k6.3  -k6.2  k6.4-1  k5.5       
                                              k5.6                                    
5           k5.1 k5.2 k5.3 k5.4 k5.5 k5.6     k5.1-1 -k5.3  -k5.2  k5.4-1  k4.5       
                                              k4.6                                    
6           k6.1 k6.2 k6.3 k6.4 k6.5 k6.6     k4.1-1 -k4.3  -k4.2  k4.4-1  k3.5       
                                              k3.6                                    
7           k7.1 k7.2 k7.3 k7.4 k7.5 k7.6     k3.1-1 -k3.3  -k3.2  k3.4-1  k2.5       
                                              k2.6                                    
8           k8.1 k8.2 k8.3 k8.4 k8.5 k8.6     k2.1-1 -k2.3  -k2.2  k2.4-1  k1.5       
                                              k1.6                                    
output      k9.1 k9.2 k9.3 k9.4               k1.1-1 -k1.2  -k1.3  k1.4-1             
 
where:  k1.1^(-1 ) is the multiplicative inverse mod 2^(16) +1  
-k1.2 is the additive inverse mod 2^(16)  and the original operations are:  
(+) bit-by-bit xor + additional mod 2^(16) of 16-bit integers"
"* multiplication mod 2^(16) +1 (where 0 means 2^(16) )  
idea example encryption 
#            key (128-bits)       plain (64-bit)   cipher (64-bit) 
7ca110454a1a6e5701a1d6d039776742 690f5b0d9a26939b 1bddb24214237ec7 
idea(x=690f 5b0d 9a26 939b) 
  r=1, x=690f 5b0d 9a26 939b, sk=7ca1 1045 4a1a 6e57 01a1 d6d0 
    steps=234a 6b52 e440 840f c70a ef5d 3606 2563 0311 3917 205b e751 5245 bd18 
  r=2, x=205b e751 5245 bd18, sk=3977 6742 8a94 34dc ae03 43ad 
    steps=460a 4e93 dcd9 3995 9ad3 7706 d13d 4843 4b2d 1c6a 0d27 97f4 52f9 25ff 
  r=3, x=0d27 97f4 52f9 25ff, sk=a072 eece 84f9 4220 b95c 0687 
    steps=3320 86c2 d7f2 7410 e4d2 f2d2 57cb 4a9d 04e4 5caf 37c4 d316 da6d 28bf 
  r=4, x=37c4 d316 da6d 28bf, sk=5b40 e5dd 9d09 f284 4115 2869 
    steps=8920 b8f3 7776 69e3 fe56 d110 7266 4376 10c0 8326 99e0 67b6 3bd5 eac5 
  r=5, x=99e0 67b6 3bd5 eac5, sk=0eb6 81cb bb3a 13e5 0882 2a50 
    steps=9c69 e981 f70f 8efb 6b66 677a b63b 1db5 f5a8 abe3 69c1 02a7 4262 2518 
  r=6, x=69c1 02a7 4262 2518, sk=d372 b80d 9776 7427 ca11 0454 
    steps=d39a bab4 d9d8 75d4 0a42 cf60 ba4a 89aa d175 8bbf 02ef 08ad 310b fe6b 
  r=7, x=02ef 08ad 310b fe6b, sk=a1a6 e570 1a1d 6d03 4f94 2208 
    steps=3420 ee1d 4b28 1deb 7f08 f3f6 c124 b51a 04bd c5e1 309d 4f95 2bfc d80a 
  r=8, x=309d 4f95 2bfc d80a, sk=a943 4dca e034 3ada 072e ece8 
    steps=3df3 9d5f 0c30 0ada 31c3 9785 44a5 dc2a 7253 b6f8 4fa0 7e63 2ba7 bc22 
  out, x=4fa0 2ba7 7e63 bc22, sk=1152 869b 95c0 6875  
= 1bdd b242 1423 7ec7 
differential  cryptanalysis of block ciphers 
· differential cryptanalysis is a recently (in the public research community) developed 
method which provides a powerful means of analysing block ciphers  
· it has been used to analyse most of the currently proposed block ciphers with varying 
degrees of success  
· usually have a break-even point in number of rounds of the cipher used for which 
differential cryptanalysis is faster than exhaustive key-space search  
· if this number is greater than that specified for the cipher, then it is regarded as broken  
overview of differential cryptanalysis 
· is a statistical attack against feistel ciphers  
· uses structure in cipher not previously used  
· design of s-p networks is such that the output from function f is influenced by both input 
and key  
r(i)=l(i-1) (+) f(k(i)(+)r(i-1)) 
· hence cannot trace values back through cipher without knowing the values of the key"
"biham & shamir's key idea is to compare two separate encryptions (using the same key) and look 
at the xor of the s-box inputs and outputs and this is independent  of the key being used  
 
ra(i)=f(k(i)(+)ra(i-1)) 
rb(i)=f(k(i)(+)rb(i-1)) 
hence 
y(i)= ra(i)(+)rb(i) 
= f(k(i)(+)ra(i-1)(+)k(i)(+)rb(i-1)) 
= f(ra(i-1)(+)rb(i-1)) = f(x(i)) 
· further various input xor - output xor pairs occur with different probabilities  
· hence knowing information on these pairs gives us additional information on the cipher  
xor profiles and characteristics 
· start by compiling a table of input vs output xor values, an xor profile  for each s-box  
 
· a particular input xor value and output xor value pair will occur with some probability  
· call such a specified pair, a characteristic   
· can infer information about key value in one round, if find a pair of encryptions matching a 
characteristic, and hence knowing input and output xor values  
· have several variant forms of differential cryptanalysis, will discuss just the general form 
used for attacking many rounds (>8) of a cipher  
· can describe 1-round characteristic by:  
f(x')->y', pr(p) 
(a',b')->(b',a'(+)f(b')) with prob p 
· useful characteristics: 
i) f(0')->0', pr(1) ie always 
a.(x,0)->(0,x) always 
ii) f(x')->0', pr(p_(0) ) 
b.(0,x)->(x,0) with probability p_(0) 
· attack multiple rounds using n-round characteristics   
· n-round characteristics  combine one round characteristics whose outputs & inputs match"
"· probability of n-round characteristic  is product of the 1-round characteristic 
probabilities  
  2-round iterative characteristic 
· some common characteristic.0000c structures are:  
* a 2-round characteristic:  
a.(x,0)->(0,x) always  
b.(0,x)->(x,0) with probability p  
* a 3-round characteristic:  
a.(x,0)->(0,x) always  
b.(0,x)->(x,x) with probability p1  
c.(x,x)->(x,0) with probability p2  
· perform attack by repeatedly encrypting plaintext pairs with known input xor until obtain 
expected output xor matching n-round characteristic being used  
· if all intermediate rounds also match required xor (which is unknown) then have a right 
pair, if not then have a wrong pair , relative ratio is s/n for attack  
· assume know xor at intermediate rounds (if right pair) then deduce keys values for the 
rounds - right pairs suggest same key bits, wrong pairs give random values  
· for large numbers of rounds, probability is so low that more pairs are required than exist 
with 64-bit inputs  
· optimisations of this attack can be made, trading memory for search time, and number of 
rounds used  
· in their latest paper, biham and shamir show how a 13-round iterated characteristic can be 
used to break the full 16-round des 
linear  cryptanalysis of block ciphers 
· linear cryptanalysis is another recently developed method for analysing block ciphers  
· like differential cryptanalysis it is a statistical method"
"· again have a break-even point in number of rounds of the cipher used for which linear 
cryptanalysis is faster than exhaustive key-space search  
· if this number is greater than that specified for the cipher, then it is regarded as broken  
· in linear cryptanalysis want to find a linear approximation which holds with prob p!=^(1) 
/_(2)  
p[i1,i2,...,ia](+)c[j1,j2,...,jb]=k[k1,k2,...,kc] 
where ia,jb,kc are bit locations in p,c,k 
· can determine one bit of key using maximum likelihood algorithm, using a large number of 
trial encryptions  
· effectiveness of linear cryptanalysis is given by  
|p - 1/2| 
· des can be broken by encrypting 2^(47) known plaintexts  
pl[7,18,24](+) pr[12,16](+) cl[15](+) cr[7,18,24,29](+) f16(cr,k16)[15] = 
k1[19,23](+)k3[22](+) k4[44](+) k5[22](+)k7[22](+) k8[44](+) k9[22](+) k11[22](+) 
k12[44](+) k13[22](+) k15[22] 
· this will recover some of the key bits, the rest must be searched for exhaustively  
· loki with 12 or more rounds cannot be broken using linear cryptanalysis  
stream  ciphers and the vernam cipher 
· process the message bit by bit (as a stream)  
· the most famous of these is the vernam cipher  (also known as the one-time pad )  
· invented by vernam, working for at&t, in 1917  
· simply add bits of message to random key bits  
· need as many key bits as message, difficult in practise (ie distribute on a mag-tape or 
cdrom)  
· is unconditionally secure provided key is truly random  
· suggest generating keystream from a smaller (base) key"
"· use some pseudo-random function to do this 
modern  private key ciphers (part 1) 
· now want to concentrate on modern encryption systems  
· these usually consider the message as a sequence of bits  
o (eg as a series of ascii characters concatenated)  
· have two broad families of methods  
o stream ciphers and block ciphers  
block  ciphers 
· in a block cipher the message is broken into blocks, each of which is then encrypted (ie 
like a substitution on very big characters - 64-bits or more)  
· most modern ciphers we will study are of this form  
shannons  theory of secrecy systems 
· claude shannon wrote some of the pivotal papers on modern cryptology theory in 1949:  
o c e shannon, ""communication theory of secrecy systems"", bell system 
technical journal, vol 28, oct 1949, pp 656-715  
o c e shannon, ""prediction and entropy of printed english"", bell system technical 
journal, vol 30, jan 1951, pp 50-64  
· in these he developed the concepts of:  
o entropy of a message,  
o redundancy in a language,  
o theories about how much information is needed to break a cipher  
o defined the concepts of computationally secure vs unconditionally secure ciphers  
· he showed that the vernam cipher is the only currently known unconditionally secure 
cipher, provided the key is truly random  
· also showed that if try to encrypt english text by adding to other english text (ie a 
book cipher), this is not secure since english is 80% redundant, giving ciphertext with 60% 
redundancy, enough to break"
"· a similar technique can also be used if the same random key stream is used twice on 
different messages, the redundancy in the messages is sufficient to break this  
· as discussed earlier, exhaustive key search is the most fundamental attack, and is directly 
proportional to the size of the key  
· can tabulate these for reasonable assumptions about the number of operations possible (& 
parallel tests):  
key size (bits)         time (1us/test)              time (1us/106test)              
24                      8.4 sec                      8.4 usec                        
32                      35.8 mins                    2.15 msec                       
40                      6.4 days                     550 msec                        
48                      4.46 yrs                     2.35 mins                       
56                      ~2000 yrs                    10.0 hrs                        
64                      ~500000 yrs                  107 days                        
· as the ultimate limit, it can be shown from energy consumption considerations that the 
maximum number of possible elementary operations in 1000 years is about: 3 x 10 ^(48)  
· similarly can show that if need say 10 atoms to store a bit of information, then the greatest 
possible number of bits storable in a volume of say the moon is: 10 ^(45)  
· if a cipher requires more operations, or needs more storage than this, it is pretty reasonable 
to say it is computationally secure  
o eg to test all possible 128-bit keys in lucifer takes about 3 x 10 ^(48) encryptions, 
needing 10 ^(19) years  
substitution -permutation ciphers 
· in his 1949 paper shannon also introduced the idea of substitution-permutation (s-p) 
networks, which now form the basis of modern block ciphers  
· an s-p network is the modern form of a substitution-transposition product cipher  
· s-p networks are based on the two primitive cryptographic operations we have seen before  
substitution  operation  
· a binary word is replaced by some other binary word  
· the whole substitution function forms the key  
· if use n bit words, the key is 2^(n)!bits, grows rapidly"
"· can also think of this as a large lookup table, with n address lines (hence 2^(n) addresses), 
each n bits wide being the output value  
· will call them s-boxes   
permutation operation   
· a binary word has its bits reordered (permuted)  
· the re-ordering forms the key  
· if use n bit words, the key is n!bits, which grows more slowly, and hence is less secure 
than substitution  
 
· this is equivalent to a wire-crossing in practise (though is much harder to do in software)  
· will call these p-boxes   
substitution-permutation network   
· shannon combined these two primitives  
· he called these mixing transformations   
 
· shannons mixing transformations are a special form of product ciphers where  
s-boxes  provide confusion  of input bits  
p-boxes  provide diffusion  across s-box inputs  
· in general these provide the following results, as described in:  
a f webster & s e tavares ""on the design of s-boxes"", in advances in cryptology - crypto 85, 
lecture notes in computer science, no 218, springer-verlag, 1985, pp 523-534  
avalanche effect   
· where changing one input bit results in changes of approx half the output bits"
"more formally, a function f has a good avalanche  effect if for each bit i,0<=i<m, if the 2^(m) 
plaintext vectors are divided into 2^(m-1) pairs x and x_(i) with each pair differing only in bit i; 
and if the 2^(m-1) exclusive-or sums, termed avalanche vectors  
v_(i) = f(x) (+) f(x_(i))  
are compared, then about half of these sums should be found to be 1.  
completeness effect   
· where each output bit is a complex function of all the input bits  
more formally, a function f has a good completeness  effect if for each bit j,0<=j<m, in the 
ciphertext output vector, there is at least one pair of plaintext vectors x and x_(i) which differ 
only in bit i, and for which f(x) and f(x_(i)) differ in bit j  
practical substitution-permutation networks   
· in practise we need to be able to decrypt messages, as well as to encrypt them, hence 
either:  
o have to define inverses for each of our s & p-boxes, but this doubles the 
code/hardware needed, or  
o define a structure that is easy to reverse, so can use basically the same code or 
hardware for both encryption and decryption  
· horst feistel, working at ibm thomas j watson research labs devised just such a 
structure in early 70's, which we now call a feistel cipher   
o the idea is to partition the input block into two halves, l(i-1)and r(i-1), and use 
only r(i-1)in each round i (part) of the cipher  
o the function g incorporates one stage of the s-p network, controlled by part of the 
key k(i)known as the ith subkey  
 
· this can be described functionally as:  
l(i) = r(i-1) 
r(i) = l(i-1) (+) g(k(i), r(i-1)) 
· this can easily be reversed as seen in the above diagram, working backwards through the 
rounds  
· in practise link a number of these stages together (typically 16 rounds) to form the full 
cipher"
"module - iii  
modular  arithmetic 
modular arithmetic is 'clock arithmetic' a congruence  a = b mod n says when divided by n that a 
and b have the same remainder  
100 = 34 mod 11  
usually have 0<=b<=n-1  
-12mod7 = -5mod7 = 2mod7 = 9mod7  
b is called the residue  of a mod n  
can do arithmetic with integers modulo n with all results between 0 and n  
addition   
a+b mod n  
subtraction   
a-b mod n = a+(-b) mod n  
multiplication   
a.b mod n  
· derived from repeated addition  
· can get a.b=0 where neither a,b=0  
o eg 2.5 mod 10  
division   
a/b mod n  
· is multiplication by inverse of b: a/b = a.b-1 mod n  
· if n is prime b-1 mod n exists s.t b.b-1 = 1 mod n  
o eg 2.3=1 mod 5 hence 4/2=4.3=2 mod 5  
· integers modulo n with addition and multiplication form a commutative ring with the laws 
of  
associativity   
(a+b)+c = a+(b+c) mod n  
commutativity   
a+b = b+a mod n"
"distributivity   
(a+b).c = (a.c)+(b.c) mod n  
· also can chose whether to do an operation and then reduce modulo n, or reduce then do the 
operation, since reduction is a homomorphism from the ring of integers to the ring of integers 
modulo n  
o a+/-b mod n = [a mod n +/- b mod n] mod n  
o (the above laws also hold for multiplication)  
· if n is constrained to be a prime number p then this forms a galois field modulo p  denoted 
gf(p)  and all the normal laws associated with integer arithmetic work  
exponentiation  in gf(p) 
· many encryption algorithms use exponentiation - raising a number a (base) to some power b 
(exponent) mod p  
o b = ae mod p  
· exponentiation is basically repeated multiplication, which take s o(n) multiples for a 
number n  
· a better method is the square and multiply algorithm 
let base = a, result =1 
for each bit ei (lsb to msb) of exponent 
if ei=0 then 
square base mod p 
if ei=1 then 
multiply result by base mod p 
square base mod p (except for msb) 
required ae is result 
· only takes o(log 2 n) multiples for a number n 
see sebbery p9 fig2.1 + example 
discrete  logarithms in gf(p) 
· the inverse problem to exponentiation is that of finding the discrete logarithm  of a number 
modulo p  
o find x where ax = b mod p  
seberry examples p10  
· whilst exponentiation is relatively easy, finding discrete logarithms is generally a hard
problem, with no easy way"
"· in this problem, we can show that if p is prime, then there always exists an a such that there 
is always a discrete logarithm for any b!=0  
o successive powers of a ""generate"" the group mod p  
· such an a is called a primitive root  and these are also relatively hard to find  
2.1.3 greatest common divisor 
· the greatest common divisor (a,b) of a and b is the largest number that divides evenly into 
both a and b  
· euclid's algorithm  is used to find the greatest common divisor (gcd) of two numbers a 
and n, a<n  
o use fact if a and b have divisor d so does a-b, a-2b  
gcd (a,n) is given by: 
let g0=n 
g1=a 
gi+1 = gi-1 mod gi 
when gi=0 then (a,n) = gi-1 
eg find (56,98) 
g0=98 
g1=56 
g2 = 98 mod 56 = 42 
g3 = 56 mod 42 = 14 
g4 = 42 mod 14 = 0 
hence (56,98)=14 
inverses  and euclid's extended gcd routine 
· unlike normal integer arithmetic, sometimes a number in modular arithmetic has a unique 
inverse  
o a-1 is inverse of a mod n if a.a-1 = 1 mod n  
o where a,x in {0,n-1}  
o eg 3.7 = 1 mod 10  
· if (a,n)=1 then the inverse always exists  
· can extend  euclid's algorithm  to find inverse by keeping track of g i = u i.n + v i.a  
· extended euclid's (or binary gcd) algorithm  to find inverse of a number a mod n 
(where (a,n)=1) is:  
inverse(a,n) is given by: 
g0=n  u0=1  v0=0 
g1=a  u1=0  v1=1"
"let 
y = gi-1 div gi 
gi+1 = gi-1 - y.gi = gi-1 mod gi 
ui+1 = ui-1 - y.ui 
vi+1 = vi-1 - y.vi 
when gi=0 then inverse(a,n) = vi-1 
example  
eg: want to find inverse(3,460): 
i          y          g          u          v 
0          -          460        1          0 
1          -          3          0          1 
2          153        1          1          -153 
3          3          0          -3         460 
hence inverse(3,460) = -153 = 307 mod 460 
euler  totient function [[phi]](n) 
· if consider arithmetic modulo n, then a reduced set of residues  is a subset of the complete 
set of residues modulo n which are relatively prime to n  
o eg for n=10,  
o the complete set of residues is {0,1,2,3,4,5,6,7,8,9}  
o the reduced set of residues is {1,3,7,9}  
· the number of elements in the reduced set of residues is called the euler totient function 
[[phi]](n)   
· there is no single formula for [[phi]](n) but for various cases count how many elements are 
excluded [4]:  
p (p prime) [[phi]](p) =p-1 
pr (p prime) [[phi]](p) =pr-1(p-1) 
p.q (p,q prime) [[phi]](p.q) =(p-1)(q-1) 
see seberry table 2.1 p13  
· several important results based on [[phi]](n) are:  
· theorem (euler's generalization)   
o let gcd(a,n)=1 then  
o a[[phi]](n) mod n = 1  
· fermat's theorem"
"o let p be a prime and gcd(a,p)=1 then  
o ap-1 mod p = 1  
· algorithms to find inverses  a-1 mod n  
1. search 1,...,n-1 until an a-1
 is found with a.a-1 mod n  
2. if [[phi]](n) is known, then from euler's generalization  
§ a-1 = a[[phi]](n)-1 mod n  
3. otherwise use extended euclid's algorithm for inverse  
computing  with polynomials in gf(qn) 
· have seen arithmetic modulo a prime number gf(p)  
· also can do arithmetic modulo q over polynomials of degree n, which also form a galois 
field gf(qn)  
· its elements are polynomials of degree (n-1) or lower  
o a(x)=a n-1xn-1+an- 2xn- 2+...+a 1x+a 0  
· have residues for polynomials just as for integers  
o p(x)=q(x)d(x)+r(x)  
o and this is unique if deg[r(x)]<deg[d(x)]  
· if r(x)=0, then d(x) divides  p(x), or is a factor  of p(x)  
· addition in gf(qn) just involves summing equivalent terms in the polynomial modulo q 
(xor if q=2)  
o a(x)+b(x)=(a n-1+bn-1)xn- 1+...+(a 1+b1)x+(a 0+b0)  
multiplication  with polynomials in gf(qn) 
· multiplication in gf(qn) involves [5]  
o multiplying the two polynomials together (cf longhand multiplication; here use shifts 
& xors if q=2)  
o then finding the residue modulo a given irreducible polynomial  of degree n  
· an irreducible polynomial  d(x) is a 'prime' polynomial, it has no polynomial divisors other 
than itself and 1  
· modulo reduction of p(x) consists of finding some r(x) st: p(x)=q(x)d(x)+r(x)  
o nb. in gf(2n) with d(x)=x3+x+1 can do simply by replacing x3 with x+1"
"· eg in gf(23) there are 8 elements:  
o 0, 1, x, x+1, x2, x2+1, x2+ x ,  x2+x+1  
· with irreducible polynomial d(x)=x3+x+1* arithmetic in this field can be summarised as:  
seberry table 2.3 p20  
· can adapt gcd, inverse, and crt algorithms for gf(qn)  
o [[phi]](p(x)) = 2n-1 since every poly except 0 is relatively prime to p(x)  
· arithmetic in gf(qn) can be much faster than integer arithmetic, especially if the irreducible 
polynomial is carefully chosen  
o eg a fast implementation of gf(2127) exists  
· has both advantages and disadvantages for cryptography, calculations are faster, as are 
methods for breaking  
public -key ciphers 
· traditional secret key  cryptography uses a single key shared by both sender and receiver  
· if this key is disclosed communications are compromised  
· also does not protect sender from receiver forging a message & claiming is sent by sender, 
parties are equal  
· public-key  (or two-key ) cryptography  involves the use of two keys:  
o a public-key , which may be known by anybody, and can be used to encrypt 
messages , and verify signatures   
o a private-key , known only to the recipient, used to decrypt messages , and sign
(create)  signatures"
"· the public-key is easily computed from the private key and other information about the 
cipher (a polynomial time (p-time) problem)  
· however, knowing the public-key and public description of the cipher, it is still 
computationally infeasible to compute the private key (an np-time problem)  
· thus the public-key may be distributed to anyone wishing to communicate securly with its 
owner (although secure distribution of the public-key is a non-trivial problem - the key distribution
problem)  
· have three important classes of public-key algorithms:  
o public-key distribution schemes  (pkds) - where the scheme is used to securely 
exchange a single piece of information (whose value depends on the two parties, but cannot be set).  
o this value is normally used as a session key for a private-key scheme  
o signature schemes  - used to create a digital signature only, where the private-key 
signs (create) signatures, and the public-key verifies signatures  
o public key schemes (pks)  - used for encryption, where the public-key encrypts 
messages, and the private-key decrypts messages.  
o any public-key scheme can be used as a pkds, just by selecting a message which is 
the required session key  
o many public-key schemes are also signature schemes (provided encryption& 
decryption can be done in either order)  
rsa  public-key cryptosystem 
· best known and widely regarded as most practical public-key scheme was proposed by 
rivest, shamir & adleman in 1977:  
r l rivest, a shamir, l adleman, ""on digital signatures and public key cryptosystems"", 
communications of the acm, vol 21 no 2, pp120-126, feb 1978  
· it is a public-key scheme which may be used for encrypting messages, exchanging keys, and 
creating digital signatures  
· is based on exponentiation in a finite (galois) field over integers modulo a prime  
o nb exponentiation takes o((log n)3) operations  
· its security relies on the difficulty of calculating factors of large numbers  
o nb factorization takes o(e log n log log n) operations  
o (same as for discrete logarithms)  
· the algorithm is patented in north america (although algorithms cannot be patented 
elsewhere in the world)  
o this is a source of legal difficulties in using the scheme"
"· rsa is a public key encryption algorithm based on exponentiation using modular arithmetic  
· to use the scheme, first generate keys:  
· key-generation by each user consists of:  
o selecting two large primes at random (~100 digit), p, q  
o calculating the system modulus r=p.q p, q primes  
o selecting at random the encryption key e,  
o e < r, gcd(e, f(r)) = 1  
o solving the congruence to find the decryption key d,  
o e.d [[equivalence]] 1 mod [[phi]](r) 0 <= d <= r  
o publishing the public encryption key: k1={e,r}  
o securing the private decryption key: k2={d,p,q}  
· encryption of a message m to obtain ciphertext c is:  
· c = me mod r 0 <= d <= r  
· decryption of a ciphertext c to recover the message m is:  
o m = cd = me.d = m1+n.[[phi]](r) = m mod r  
· the rsa system is based on the following result:  
if r = pq where p, q are distinct large primes then 
x [[phi]](r) = 1 mod r 
for all x not divisible by p or q 
and [[phi]](r) = (p-1)(q-1) 
rsa  example 
· usually the encryption key e is a small number, which must be relatively prime to [[phi]](r) 
(ie gcd(e, [[phi]](r)) = 1)  
· typically e may be the same for all users (provided certain precautions are taken), 3 is 
suggested  
· the decryption key d is found by solving the congruence:   
e.d [[equivalence]] 1 mod [[phi]](r), 0 <= d <= r, 
· an extended euclid's gcd or binary gcd calculation is done to do this.  
given e=3, r=11*47=517, [[phi]](r)=10*46=460 
then d=inverse(3,460) by euclid's alg: 
  i    y    g    u    v 
  0    -  460    1    0 
  1    -    3    0    1"
"2  153    1    1 -153 
  3    3    0   -3  460 
ie: d = -153, or 307 mod 517 
· a sample rsa encryption/decryption calculation is:   
m = 26 
c = 263 mod 517 = 515 
m = 515307 mod 517 = 26 
·  
security  of rsa 
· the security of the rsa scheme rests on the difficulty of factoring the modulus of the 
scheme r  
· best known factorization algorithm (brent-pollard) takes:  
operations on number r whose largest prime factor is p  
decimal digits in r                          #bit operations to factor r                   
  20                                         7200                                          
  40                                         3.11e+06                                      
  60                                         4.63e+08                                      
  80                                         3.72e+10                                      
100                                          1.97e+12                                      
120                                          7.69e+13                                      
140                                          2.35e+15                                      
160                                          5.92e+16                                      
180                                          1.26e+18                                      
200                                          2.36e+19                                      
· this leads to r having a length of 200 digits (or 600 bits) given that modern computers 
perform 1-100 mips the above can be divided by 106 to get a time in seconds  
o nb: currently 1e+14 operations is regarded as a limit for computational feasability 
and there are 3e+13 usec/year  
· but most (all!!) computers can't directly handle numbers larger than 32-bits (64-bits on the 
very newest)  
· hence need to use multiple precision arithmetic  libraries to handle numbers this large  
multi -precision arithmetic 
· involves libraries of functions that work on multiword (multiple precision) numbers  
· classic references are in knuth vol 2 - ""seminumerical algorithms"""
"o multiplication digit by digit  
o do exponentiation using square and multiply [6]  
· are a number of well known multiple precision libraries available - so don't reinvent the 
wheel!!!!  
· can use special tricks when doing modulo arithmetic, especially with the modulo reductions  
faster  modulo reduction 
* chivers (1984) noted a fast way of performing modulo reductions whilst doing multi-precision 
arithmetic calcs  
given an integer a of n characters (a 0, ... , a n-1) of base b  
then  
ie: this implies that the msd of a number can be removed and its remainder mod m added to the 
remaining digits will result in a number that is congruent mod m to the original.  
* chivers algorithm for reducing a number is thus:  
1. construct an array r = (bd, 2.bd, ... , (b-1).bd)(mod m)   
2. for i = n-1 to d do  
while a[i] != 0 do  
j = a[i];  
a[i] = 0;  
a = a + bi-d.r[j];  
end while  
end for  
where a[i] is the ith character of number a  
r[j] is the jth integer residue from the array r  
n is the number of symbols in a  
d is the number of symbols in the modulus  
speeding  up rsa - alternate multiplication techniques"
"· conventional multiplication takes o(n2) bit operations, faster techniques include:  
· the schonhage-strassen integer multiplication algorithm:  
o breaks each integer into blocks, and uses them as coefficients of a polynomial  
o evaluates these polynomials at suitable points, & multiplies the resultant values  
o interpolates these values to form the coefficients of the product polynomial  
o combines the coefficients to form the product of the original integer  
o the discrete fourier transform, and the convolution theorem are used to speed up 
the interpolation stage  
o can multiply in o(n log n) bit operations  
· the use of specialized hardware because:  
o conventional arithmetic units don't scale up, due to carry propogation delays  
o so can use serial-parallel carry-save, or delayed carry-save techniques with o(n) 
gates to multiply in o(n) bit operations,  
o or can use parallel-parallel techniques with o(n2) gates to multiply in o(log n) bit 
operations  
rsa  and the chinese remainder theorem 
· a significant improvement in decryption speed for rsa can be obtained by using the 
chinese remainder theorem to work modulo p and q respectively  
o since p,q are only half the size of r=p.q and thus the arithmetic is much faster  
· crt is used in rsa by creating two equations from the decryption calculation:  
m = cd mod r 
as follows:  
m1 = m mod p = (c mod p)d mod (p-1)  
m2 = m mod q = (c mod q)d mod (q-1)  
then the pair of equations  
m = m1 mod p m = m2 mod q  
has a unique solution by the crt, given by:  
m = [((m2 +q - m1)u mod q] p + m1 
where  
p.u mod q = 1  
 primality testing and rsa 
· the first stage of key-generation for rsa involves finding two large primes p, q"
"· because of the size of numbers used, must find primes by trial and error  
· modern primality tests utilize properties of primes eg:   
o an-1 = 1 mod n where gcd(a,n)=1  
o all primes numbers 'n' will satisfy this equation  
o some composite numbers will also satisfy the equation, and are called pseudo-
primes.  
· most modern tests guess at a prime number 'n', then take a large number (eg 100) of 
numbers 'a', and apply this test to each. if it fails the number is composite, otherwise it is is 
probably prime.  
· there are a number of stronger tests which will accept fewer composites as prime than the 
above test. eg:  
rsa  implementation in practice 
· software implementations   
o generally perform at 1-10 bits/second on block sizes of 256-512 bits   
o two main types of implementations:  
§ - on micros as part of a key exchange mechanism in a hybrid scheme  
§ - on larger machines as components of a secure mail system  
· harware implementations   
o generally perform 100-10000 bits/sec on blocks sizes of 256-512 bits   
o all known implementations are large bit length conventional alu units  
elgamal  
· a variant of the diffie-hellman key distribution scheme, allowing secure exchange of 
messages  
· published in 1985 by elgamal in  
t. elgamal, ""a public key cryptosystem and a signature scheme based on discrete logarithms"", 
ieee trans. information theory, vol it-31(4), pp469-472, july 1985.  
· like diffie-hellman its security depends on the difficulty of factoring logarithms"
"· key generation   
o select a large prime p (~200 digit), and  
o [[alpha]] a primitive element mod p  
o a has a secret number x a  
o b has a secret number x b  
o a and b compute  ya and y b respectively, which are then made public  
§ ya = [[alpha]]xa mod p  
§ yb = [[alpha]]x b mod p  
· to encrypt a message m into ciphertext c,  
o selects a random number k, 0 <= k <= p-1  
o computes the message key k  
§ k = y bk mod p  
o computes the ciphertext pair: c = {c1,c2}  
§ c1 = [[alpha]]k mod p c 2 = k.m mod p  
· to decrypt  the message  
o extracts the message key k  
§ k = c 1xb mod p = [[alpha]]k.xb mod p  
o extracts m by solving for m in the following equation:  
§ c2 = k.m mod p  
other  public-key schemes 
· a number of other public-key schemes have been proposed, some of the better known being:  
o knapsack based schemes  
o mceleice's error correcting code based schems  
· all of these schemes have been broken  
· the only currently known secure public key schemes are those based on exponentiation  
(all of which are patented in north america)  
· it has proved to be very difficult to develop secure public key schemes  
· this in part is why they have not been adopted faster, as their theorectical advantages might 
have suggested"
"authentication requirements 
in the context of communication across a network, the following attacks can be identified: 
  disclosure – releases of message contents to any person or process not possessing the 
appropriate cryptographic key. 
    traffic analysis – discovery of the pattern of traffic between parties. 
    masquerade – insertion of messages into the network fraudulent source. 
content  modification  –  changes  to  the  content  of  the  message,  including 
insertion deletion, transposition and modification. 
  sequence modification – any modification to a sequence of messages between parties, 
including insertion, deletion and reordering. 
    timing modification – delay or replay of messages. 
    source repudiation – denial of transmission of message by source. 
    destination repudiation – denial of transmission of message by destination. 
easures to deal with first two attacks are in the realm of message confidentiality. measures to deal 
with 3 through 6 are regarded as message authentication. item 7 comes under digital signature and 
dealing with item 8 may require a combination of digital signature and a protocol to counter this 
attack. 
authentication  functions 
any message authentication or digital signature mechanism can be viewed as having fundamentally 
two levels. at the lower level, there may be some sort of function that produces an authenticator: a 
value to be used to authenticate a message. this lower layer function is then used as primitive in a 
higher-layer authentication protocol that enables a receiver to verify the authenticity of a message."
"the different types of functions that may be used to produce an authenticator   
are as follows:  
  message  encryption  –  the  cipher  text  of  the  entire  message  serves  as  its 
authenticator. 
  message authentication code (mac) – a public function of the message and a secret 
key that produces a fixed length value serves as the authenticator. 
  hash function – a public function that maps a message of any length into a fixed length 
hash value, which serves as the authenticator. 
 
message encryption   
message encryption by itself can provide a measure of authentication.  the analysis differs 
from symmetric and public key encryption schemes."
"suppose the message can be any arbitrary bit pattern. in that case, there is no way to determine 
automatically, at the destination whether an incoming message is the ciphertext of a legitimate 
message. one solution to this problem is to force the plaintext to have some structure that is easily 
recognized but that cannot be replicated without recourse to the encryption function. we could, for 
example, append an error detecting code, also known as frame check sequence (fcs) or checksum 
to each message before encryption 
‘a’ prepares a plaintext message m and then provides this as input to a function f that produces an 
fcs. the fcs is appended to m and the entire block is then encrypted. at the destination, b 
decrypts the incoming block and treats the result as a message with an appended fcs. b applies the 
same function f to attempt to reproduce the fcs. if the calculated fcs is equal to the incoming 
fcs, then the message is considered authentic. 
in the internal error control, the function f is applied to the plaintext, whereas in external error 
control, f is applied to the ciphertext (encrypted message). 
message  authentication code (mac) 
an alternative authentication technique involves the use of secret key to generate a small fixed 
size block of data, known as cryptographic checksum or mac that is appended to the message. 
this technique assumes that two communication parties say a and b, share a common secret key 
‘k’. when a has to send a message to b, it calculates the mac as a function of the message and the 
key. 
mac = c k(m)          where  m – input message"
"c – mac function  
k – shared secret key   
 
+mac - message authentication code  
the message plus mac are transmitted to the intended recipient. the recipient performs the same 
calculation on the received message, using the shared secret key, to generate a new mac. the 
received mac is compared to the calculated mac. if it is equal, then the message is considered 
authentic. 
a mac function is similar to encryption. one difference is that mac algorithm need not be 
reversible, as it must for decryption. in general, the mac function is a many- to-one function."
"requirements  for mac: 
when an entire message is encrypted for confidentiality, using either symmetric or asymmetric 
encryption, the security of the scheme generally depends on the bit length of the key. barring some 
weakness in the algorithm, the opponent must resort to a brute- force attack using all possible keys. 
on average, such an attack will require 2(k-1) attempts for a k-bit key. 
in  the  case  of  a  mac,  the  considerations  are  entirely  different.  using  brute-force methods, 
how would an opponent attempt to discover a key? 
if confidentiality is not employed, the opponent has access to plaintext messages and their 
associated macs. suppose k > n; that is, suppose that the key size is greater than the mac size. 
then, given a known m 1 and mac 1, with mac 1 = ck (m 1), the cryptanalyst can perform mac i  
= ck i (m1) for all possible key values k i. 
at least one key is guaranteed to produce a match of mac i = mac 1. 
note that a total of 2k macs will be produced, but there are only 2n < 2k different mac values. 
thus, a number of keys will produce the correct mac and the opponent has no way of knowing 
which is the correct key. on average, a total of 2k/2n  = 2(k-n)  keys will produce a match. thus, 
the opponent must iterate the attack: 
     round 1  
given: m 1, mac 1 = ck( m 1) 
compute mac i = ck i ( m1) for all 2k keys 
number of matches ≈2(k-n) 
     round 2  
given: m 2, mac 2 = ck( m 2) 
compute mac i = ck i ( m2) for the 2(k-n) keys resulting from round 1 
number of matches ≈2(k-2xn) 
and so on. on average, a rounds will be needed if k = a x n. for example, if an 80-bit key is used 
and the mac is 32 bits long, then the first round will produce about 248 possible keys. the second 
round will narrow the possible keys to about 216 possibilities. the third round should produce only 
a single key, which must be the one used by the sender. 
if the key length is less than or equal to the mac length, then it is likely that a first round will 
produce a single match."
"thus, a brute-force attempt to discover the authentication key is no less effort and may be more 
effort than that required to discover a decryption key of the same length. however, other attacks 
that do not require the discovery of the key are possible. 
consider the following mac algorithm. let m = (x 1||x2||...||x m) be a message that is treated as a 
concatenation of 64-bit blocks x i. then define 
δ(m)= x1  x2  …  xm 
ck(m)=ek( δ(m) 
where      is the exclusive-or (xor) operation and the encryption algorithm is des in electronic 
codebook mode. thus, the key length is 56 bits and the mac length is 64 bits. if an opponent 
observes {m||c(k, m)}, a brute-force attempt to determine k will require at least 256 encryptions. 
but the opponent can attack the system by replacing x 1 through 
xm-1  with any desired values y 1  through y m-1  and replacing x m  with y m  where y m  i s  
calculated as follows: 
ym = y1     y2                 ...           y m1     δ(m) 
the opponent can now concatenate the new message, which consists of y 1  through y m, with the 
original mac to form a message that will be accepted as authentic by the receiver. with this 
tactic, any message of length 64 x  (m-1) bits can be fraudulently inserted. 
then the mac function should satisfy the following requirements: the mac function should have 
the following properties: 
    if an opponent observes m and c k(m), it should be computationally infeasible for 
the opponent to construct a message m’ such that c k(m’) = c k(m) 
 c k(m) should be uniformly distributed in the sense that for randomly chosen 
messages, m and m’, the probability that c k(m) = c k(m’) is 2-n  where n is the number of bits 
in the mac. 
    let m’ be equal to some known transformation on m. i.e., m’ = f(m). 
mac  based on des 
one of the most widely used macs, referred to as data authentication algorithm 
(daa) is based on des. 
the algorithm can be defined as using cipher block chaining (cbc) mode of operation of des with 
an initialization vector of zero. the data to be authenticated are grouped into contiguous 64-bit 
blocks: d 1, d2  … d n. if necessary, the final block is padded on the right with zeros to form a 
full 64-bit block. using the des encryption algorithm and a secret key, a data authentication code"
"(dac) is calculated as follows: 
o1 = ek(d1) 
o2 = ek(d2      o1) 
o3 = ek(d3      o2) … 
on = ek(dn      on-1) 
hash  functions 
a variation on the message authentication code is the one way hash function. as with mac, a hash 
function accepts a variable size message m as input and produces a fixed-size output, referred to as 
hash code h(m). unlike a mac, a hash code does not use a key but is a function only of the 
input message. the hash code is also referred to as a message digest or hash value. 
there are varieties of ways in which a hash code can be used to provide message authentication, as 
follows: 
a)  the message plus the hash code is encrypted using symmetric encryption. this is identical to 
that of internal error control strategy. because encryption is applied to the entire message plus the 
hash code, confidentiality is also provided."
"b)  only the hash code is encrypted, using symmetric encryption. this reduces the processing 
burden for those applications that do not require confidentiality. 
c)  only the hash code is encrypted, using the public key encryption and using the 
sender’s private key. it provides authentication plus the digital signature. 
d)  if confidentiality as well as digital signature is desired, then the message plus the public key 
encrypted hash code can be encrypted using a symmetric secret key. 
e)  this   technique   uses   a   hash   function,   but   no   encryption   for   message authentication. 
this technique assumes that the two communicating parties share a common secret value ‘s’. the 
source computes the hash value over the concatenation of m and s and appends the resulting hash 
value to m. 
f) confidentiality can be added to the previous approach by encrypting the entire message 
plus the hash code. 
a hash value h is generated by a function h of the form h = h(m) 
where m is a variable-length message and h(m) is the fixed-length hash value. the hash value is 
appended to the message at the source at a time when the message is assumed or known to be 
correct.  the receiver authenticates that message by re-computing the hash value. 
requirements for a hash function  
1.   h can be applied to a block of data of any size."
"2.   h produces a fixed-length output.  
3.   h(x) is relatively easy to compute for any given x, making both hardware and  
  software implementations practical. 
4.   for any given value h, it is computationally infeasible to find x such that h(x) =  
h. this is sometimes referred to in the literature as the one-way property. 
 
 
5.   for any given block x, it is computationally infeasible to find y        x such that  
h(y) = h(x). this is sometimes referred to as weak collision resistance .  
6.   it is computationally infeasible to find any pair (x, y) such that h(x) = h(y). this is sometimes 
referred to as strong collision resistance . 
 
the first three properties are requirements for the practical application of a hash function to 
message authentication. the fourth property, the one-way property, states that it is easy to generate 
a code given a message but virtually impossible to generate a message given a code. the fifth 
property guarantees that an alternative message hashing to the same value as a given message 
cannot be found. this prevents forgery when an encrypted hash code is used.the sixth property 
refers to how resistant the hash function is to a type of attack known as the birthday attack, which 
we examine shortly. 
 
simple hash functions  
 
all hash functions operate using the following general principles. the input (message, file, etc.) is 
viewed as a sequence of n-bit blocks. the input is processed one block at a time in an iterative 
fashion to produce an n-bit hash function. 
 
one of the simplest hash functions is the bit-by-bit exclusive-or (xor) of every block. this can be 
expressed as follows: 
 
 
 
 
ci = bi1     bi1     ...   b im 
where 
ci   = ith bit of the hash code, 1 ≤i ≤n 
 
m = number of n-bit blocks in the input b ij   = ith bit in jth block 
= xor operation 
 
 
 
thus, the probability that a data error will result in an unchanged hash value is 2n. with more"
"predictably formatted data, the function is less effective. for example, in most normal text files, 
the high-order bit of each octet is always zero. so if a 128-bit hash value is used, instead of an 
effectiveness of 2128, the hash function on this type of data has an effectiveness of 2112. 
a simple way to improve matters is to perform a one-bit circular shift, or rotation, on the hash 
value after each block is processed.  the procedure can be summarized as follows: 
1.   initially set the n-bit hash value to zero. 
2.   process each successive n-bit block of data as follows: 
a.   rotate the current hash value to the left by one bit. b.   xor the block into the hash value. 
birthday  attacks 
suppose that a 64-bit hash code is used. one might think that this is quite secure. for example, 
if an encrypted hash code c is transmitted with the corresponding unencrypted 
message m, then an opponent would need to find an m' such that h(m') = h(m) to substitute 
another message and fool the receiver. 
on average, the opponent would have to try about 263 messages to find one that matches the hash 
code of the intercepted message 
however, a different sort of attack is possible, based on the birthday paradox the source, a, is 
prepared to ""sign"" a message by appending the appropriate m-bit hash code and encrypting that 
hash code with a's private key  
1.   the opponent generates 2m/2 v a riations on the message, all of which convey essentially 
the same meaning. (fraudulent message 
2.   the two sets of messages are compared to find a pair of messages that produces the same 
hash code. the probability of success, by the birthday paradox, is greater than 0.5.  if no match is 
found, additional valid and fraudulent messages are generated until a match is made. 
3.   the opponent offers the valid variation to a for signature. this signature can then be attached 
to the fraudulent variation for transmission to the intended recipient. because the two variations 
have the same hash code, they will produce the same signature; the opponent is assured of success 
even though the encryption key is not known. 
thus, if a 64-bit hash code is used, the level of effort required is only on the order of 232 . 
block chaining techniques  
divide a message m into fixed-size blocks m 1,m2,..., m n and use a symmetric encryption system"
"such as des to compute the hash code g as follows: 
ho   = initial value 
hi    = emi [hi-1 ] g   = h n 
this is similar to the cbc technique, but in this case there is no secret key. as with any hash code, 
this scheme is subject to the birthday attack, and if the encryption algorithm is des and only a 64-
bit hash code is produced, then the system is vulnerable. 
furthermore, another version of the birthday attack can be used even if the opponent has access to 
only one message and its valid signature and cannot obtain multiple signings. 
here is the scenario; we assume that the opponent intercepts a message with a signature in the 
form of an encrypted hash code and that the unencrypted hash code is m bits long: 
 
1.   use the algorithm defined at the beginning of this subsection to calculate the unencrypted 
hash code g. 
2.   construct any desired message in the form q 1, q2,..., q n2. 
3.   compute for h i = eq i [hi-1 ]for 1 ≤i ≤(n-2). 
4.   generate 2m/2  random blocks; for each block x, compute e x[hn-2.] generate an 
additional 2m/2 random blocks; for each block y, compute d y[g], where d is the decryption 
function corresponding to e. 
5.   based on the birthday paradox, with high probability there will be an x and y 
such that e x [hn-2 ] = d y[ g]. 
6.   form the message q 1, q2,..., q n-2, x, y. this message has the hash code g and  
therefore can be used with the intercepted encrypted signature. 
 
this form of attack is known as a meet-in-the-middle attack . 
 
security of hash functions and macs  
just  as  with  symmetric  and  public-key  encryption,  we  can  group  attacks  on  hash functions 
and macs into two categories: brute-force attacks and cryptanalysis. 
brute-force attacks  
the nature of brute-force attacks differs somewhat for hash functions and macs. 
hash functions  
the strength of a hash function against brute-force attacks depends solely on the length of the hash"
"code produced by the algorithm. recall from our discussion of hash functions that there are three 
desirable properties: 
      one-way: for any given code h, it is computationally infeasible to find x such that 
h(x) = h. 
   weak collision resistance: for any given block x, it is computationally infeasible to find 
y x with h(y) = h(x). 
      strong collision resistance: it is computationally infeasible to find any pair (x, y) 
such that h(x) = h(y). 
for  a  hash  code  of  length  n,  the  level  of  effort  required,  as  we  have  seen  is proportional 
to the following: 
 
one way 2n 
weak collision resistance 2n 
strong collision resistance 2n/2 
 
cryptanalysis  
as with encryption algorithms, cryptanalytic attacks on hash functions and mac algorithms seek to 
exploit some property of the algorithm to perform some attack other than an exhaustive search. 
 
hash functions  
in recent years, there has been considerable effort, and some successes, in developing cryptanalytic 
attacks on hash functions. to understand these, we need to look at the overall structure of a 
typical secure hash function, and is the structure of most hash functions in use today, including 
sha and whirlpool. 
the hash function takes an input message and partitions it into l fixed-sized blocks of b bits each. 
if necessary, the final block is padded to b bits. 
the final block also includes the value of the total length of the input to the hash 
function.the inclusion of the length makes the job of the opponent more difficult. 
either the opponent must find two messages of equal length that hash to the same value or two 
messages of differing lengths that, together with their length values, hash to the same value."
"the hash algorithm involves repeated use of a compression function , f, that takes two inputs (an 
n-bit input from the previous step, called the chaining variable, and a b-bit block) and produces an 
n-bit output. at the start of hashing, the chaining variable has an initial value that is specified as 
part of the algorithm. the final value of the chaining variable is the hash value. often, b > n; hence 
the term compression. the hash function can be summarized as follows: 
 
cvo       = iv = initial n-bit      value cv i       = f (cv i-1, yi-1) 1 ≤i ≤l h(m)  = cv l 
 
where the input to the hash function is a message m consisting of the blocks y o, y1,..., y l-1. 
the structure can be used to produce a secure hash function to operate on a message of any length. 
 
message authentication codes  
there is much more variety in the structure of macs than in hash functions, so it is difficult to 
generalize about the cryptanalysis of macs. further, far less work has been done on developing 
such attacks."
"message  authentication. 
· message authentication is concerned with:  
o protecting the integrity of a message  
o validating identity of originator  
o non-repudiation of origin (dispute resolution)  
· electronic equivalent of a signature on a message  
· an authenticator , signature , or message authentication code (mac)  is sent along with 
the message  
· the mac is generated via some algorithm which depends on both the message and some 
(public or private) key known only to the sender and receiver  
· the message may be of any length  
· the mac may be of any length, but more often is some fixed size, requiring the use of some 
hash function  to condense the message to the required size if this is not acheived by the 
authentication scheme  
· need to consider replay problems with message and mac  
o require a message sequence number, timestamp or negotiated random values  
authentication  using private-key ciphers 
· if a message is being encrypted using a session key known only to the sender and receiver, 
then the message may also be authenticated  
o since only sender or receiver could have created it  
o any interference will corrupt the message (provided it includes sufficient redundancy to 
detect change)"
"o but this does not provide non-repudiation since it is impossible to prove who created the 
message  
· message authentication may also be done using the standard modes of use of a block cipher  
o sometimes do not want to send encrypted messages  
o can use either cbc or cfb modes and send final block, since this will depend on all 
previous bits of the message  
o no hash function is required, since this method accepts arbitrary length input and produces a 
fixed output  
o usually use a fixed known iv  
o this is the approached used in australian eft standards as8205  
o major disadvantage is small size of resulting mac since 64-bits is probably too small  
hashing  functions 
· hashing functions are used to condense an arbitrary length message to a fixed size, usually 
for subsequent signature by a digital signature algorithm  
· good cryptographic hash function h should have the following properties:  
o h should destroy all holomorphic structures in the underlying public key cryptosystem (be 
unable to compute hash value of 2 messages combined given their individual hash values)  
o h should be computed on the entire message  
o h should be a one-way function so that messages are not disclosed by their signatures  
o it should be computationally infeasible given a message and its hash value to compute 
another message with the same hash value  
o should resist birthday attacks  (finding any 2 messages with the same hash value, perhaps 
by iterating through minor permutations of 2 messages )  
· it is usually assumed that the hash function is public and not keyed  
· traditional crcs do not satisfy the above requirements"
"· length should be large enough to resist birthday attacks (64-bits is now regarded as too 
small, 128-512 proposed)  
md2 , md4 and md5 
· family of one-way hash functions by ronald rivest  
· md2 is the oldest, produces a 128-bit hash value, and is regarded as slower and less secure 
than md4 and md5  
· md4 produces a 128-bit hash of the message, using bit operations on 32-bit operands for 
fast implementation  
r l rivest, ""the md4 message digest algorithm"", advances in cryptology - crypto'90, lecture 
notes in computer science no 537, springer-verlag 1991, pp303-311  
· md4 overview  
o pad message so its length is 448 mod 512  
o append a 64-bit message length value to message  
o initialise the 4-word (128-bit) buffer (a,b,c,d)  
o process the message in 16-word (512-bit) chunks, using 3 rounds of 16 bit operations 
each on the chunk & buffer  
o output hash value is the final buffer value  
· some progress at cryptanalysing md4 has been made, with a small number of collisions 
having been found  
· md5 was designed as a strengthened version, using four rounds, a little more complex than 
in md4 [2]  
· a little progress at cryptanalysing md5 has been made with a small number of collisions 
having been found  
· both md4 and md5 are still in use and considered secure in most practical applications  
· both are specified as internet standards (md4 in rfc1320, md5 in rfc1321)"
"3.3.1 sha (secure hash algorithm) 
· sha was designed by nist & nsa and is the us federal standard for use with the dsa 
signature scheme (nb the algorithm is sha, the standard is shs)  
· it produces 160-bit hash values  
· sha overview [3]  
o pad message so its length is a multiple of 512 bits  
o initialise the 5-word (160-bit) buffer (a,b,c,d,e) to  
o (67452301,efcdab89,98badcfe,10325476,c3d2e1f0)  
o process the message in 16-word (512-bit) chunks, using 4 rounds of 20 bit operations 
each on the chunk & buffer  
o output hash value is the final buffer value  
· sha is a close relative of md5, sharing much common design, but each having differences  
· sha has very recently been subject to modification following nist identification of some 
concerns, the exact nature of which is not public  
· current version is regarded as secure  
digital  signature schemes 
· public key signature schemes  
· the private-key signs (creates) signatures, and the public-key verifies signatures  
· only the owner (of the private-key) can create the digital signature, hence it can be used to 
verify who created a message  
· anyone knowing the public key can verify the signature (provided they are confident of the 
identity of the owner of the public key - the key distribution problem)  
· usually don't sign the whole message (doubling the size of information exchanged), but just 
a hash  of the message"
"· digital signatures can provide non-repudiation of message origin, since an asymmetric 
algorithm is used in their creation, provided suitable timestamps and redundancies are incorporated 
in the signature  
rsa  
· rsa encryption and decryption are commutative, hence it may be used directly as a digital 
signature scheme  
o given an rsa scheme {(e,r), (d,p,q)}  
· to sign a message, compute:  
o s = md(mod r)  
· to verify  a signature, compute:  
o m = se(mod r) = me.d(mod r) = m(mod r)  
· thus know the message was signed by the owner of the public-key  
· would seem obvious that a message may be encrypted, then signed using rsa without 
increasing it size  
o but have blocking problem, since it is encrypted using the receivers modulus, but 
signed using the senders modulus (which may be smaller)  
o several approaches possible to overcome this  
· more commonly use a hash function to create a separate mdc which is then signed  
el gamal signature scheme 
· whilst the elgamal encryption algorithm is not commutative, a closely related signature 
scheme exists  
· el gamal signature scheme  
· given prime p, public random number g, private (key) random number x, compute  
o y = gx(mod p)  
· public key is (y,g,p)"
"o nb (g,p) may be shared by many users  
o p must be large enough so discrete log is hard  
· private key is (x)  
· to sign a message m  
o choose a random number k, gcd(k,p-1)=1  
o compute a = gk(mod p)  
o use extended euclidean (inverse) algorithm to solve  
o m = x.a + k.b (mod p-1)  
o the signature is (a,b), k must be kept secret  
o (like elgamal encryption is double the message size)  
· to verify  a signature (a,b) confirm:  
o ya.ab(mod p) = gm(mod p)  
example of elgamal signature scheme   
· given p=11, g=2  
· choose private key x=8  
· compute  
o y = gx(mod p) = 28(mod 11) = 3  
· public key is y=3,g=2,p=11)  
· to sign a message m=5  
o choose random k=9  
o confirm gcd(10,9)=1  
o compute  
§ a = gk(mod p) = 29(mod 11) = 6"
"o solve  
§ m = x.a+k.b(mod p-1)  
§ 5 = 8.6+9.b(mod 10)  
§ giving b = 3  
o signature is (a=6,b=3)  
· to verify the signature, confirm the following are correct:  
o ya.ab(mod p) = gm(mod p)  
o 36.63(mod 11) = 25(mod 11)  
dsa  (digital signature algorithm) 
· dsa was designed by nist & nsa and is the us federal standard signature scheme (used 
with sha hash alg)  
o dsa is the algorithm, dss is the standard  
o there was considerable reaction to its announcement!  
§ debate over whether rsa should have been used  
§ debate over the provision of a signature only alg  
· dsa is a variant on the elgamal and schnorr algorithms  
· description of dsa  
o p = 2l a prime number, where l= 512 to 1024 bits and is a multiple of 64  
o q a 160 bit prime factor of p-1  
o g = h(p-1)/q where h is any number less than p-1 with h(p-1)/q(mod p)> 1  
o x a number less than q  
o y = gx(mod p)  
· to sign a message m"
"o generate random k, k<q  
o compute  
§ r = (gk(mod p))(mod q)  
§ s = k-1.sha(m)+ x.r (mod q)  
o the signature is (r,s)  
· to verify  a signature:  
o w = s-1(mod q)  
o u1= (sha(m).w)(mod q)  
o u2= r.w(mod q)  
o v = (gu1.yu2(mod p))(mod q)  
o if v=r then the signature is verified  
· comments on dsa  
o was originally a suggestion to use a common modulus, this would make a tempting 
target, discouraged  
o it is possible to do both elgamal and rsa encryption using dsa routines, this was 
probably not intended :-)  
o dsa is patented with royalty free use, but this patent has been contested, situation 
unclear  
o gus simmons has found a subliminal channel in dsa, could be used to leak the 
private key from a library - make sure you trust your library implementer"
"module - iv  
authentication  services kerberos 
kerberos provides a centralized authentication server whose function  is  to authenticate users to 
servers and servers to users. kerberos relies exclusively on conventional encryption, making no use 
of public-key encryption. 
the following are the requirements for kerberos: 
· secure:  a network eavesdropper should not be able to obtain the necessary information 
to impersonate a user. more generally, kerberos should be strong enough that a potential opponent 
does not find it to be the weak link. 
· reliable:  for  all  services  that  rely  on  kerberos  for  access  control,  lack  of 
availability of the kerberos service means lack of availability of the supported services. hence, 
kerberos should be highly reliable and should employ a distributed server architecture, with one 
system able to back up another. 
· transparent: ideally, the user should not be aware that authentication is taking 
place, beyond the requirement to enter a password. 
· scalable: the system should be capable of supporting large numbers of clients and 
servers. this suggests a modular, distributed architecture. 
to support these requirements, the overall scheme of kerberos is that of a trusted third- party 
authentication service that uses a protocol based on that proposed by needham and schroeder 
[need78] it is trusted in the sense that clients and servers trust kerberos to mediate their mutual 
authentication. assuming the kerberos protocol is well designed, then the authentication service is 
secure if the kerberos server itself is secure. 
a simple authentication dialogue  
in an unprotected network environment, any client can apply to any server for service. the obvious 
security risk is that of impersonation. to counter this threat, servers must be able to confirm the 
identities of clients who request service. but in an open environment, this places a substantial 
burden on each server."
"an alternative is to use an authentication server (as) that knows the passwords of all users and 
stores these in a centralized database. in addition, the as shares a unique secret key with each server. 
the simple authentication dialogue is as follows:  
a more secure authentication dialogue  
there are two major problems associated with the previous approach: 
     plaintext transmission of the password. 
     each time a user has to enter the password. 
to solve these problems, we introduce a scheme for avoiding plaintext passwords, and anew server, 
known as ticket granting server (tgs). the hypothetical scenario is as follows:         
once per user logon session:  
1. c >> as: idc||idtgs 
2. as >> c: ek c (ticket tgs) 
once per type of service:  
 
3. c >> tgs: idc||idv||ticket tgs 
4. tgs >> c: ticket v 
once per service session:  
5. c >> v: idc||ticket v 
ticket tgs= ek tgs(idc||adc||idtgs||ts1||lifetime1) ticket v= ek v(idc||adc||idv||ts2||lifetime2) 
 
c: client, as: authentication server, v: server, idc : id of the client, pc:password of the client, 
adc: address of client, idv : id of the server, kv: secret key shared by as and v, ||: concatenation, 
idtgs: id of the tgs server, ts1, ts2: time stamps, lifetime: lifetime of the ticket. 
the new service, tgs, issues tickets to users who have been authenticated to as. thus, the user 
first requests a ticket-granting ticket (ticket tgs) from the as. the client module in the user 
workstation saves this ticket. each time the user requires access to a new service, the client applies 
to the tgs, using the ticket to authenticate itself. the tgs then grants a ticket for the particular 
service. the client saves each service-granting ticket and uses it to authenticate its user to a server 
each time a particular service is requested. let us look at the details of this scheme:"
"1. the client requests a ticket-granting ticket on behalf of the user by sending its user's id and 
password to the as, together with the tgs id, indicating a request to use the tgs service. 
2. the as responds with a ticket that is encrypted with a key that is derived from the user's 
password.  
when this response arrives at the client, the client prompts the user for his or her password, 
generates the key, and attempts to decrypt the incoming message. 
if the correct password is supplied, the ticket is successfully recovered.because only the correct user 
should know the password, only the correct user can recover the ticket. thus, we have used the 
password to obtain credentials from kerberos without having to transmit the password in plaintext. 
 
now that the client has a ticket-granting ticket, access to any server can be obtained with steps 3 and 
4: 
3. the client requests a service-granting ticket on behalf of the user. for this purpose, the 
client transmits a message to the tgs containing the user's id, the id of the desired service, and the 
ticket-granting ticket. 
4.   the tgs decrypts the incoming ticket and verifies the success of the decryption by the 
presence of its id. it checks to make sure that the lifetime has not expired. then it compares the user 
id and network address with the incoming information to authenticate the user. if the user is 
permitted access to the server v, the tgs issues a ticket to grant access to the requested service. 
the service-granting ticket has the same structure as the ticket-granting ticket. indeed, because the 
tgs is a server, we would expect that the same elements are needed to authenticate a client to the 
tgs and to authenticate a client to an application server. again, the ticket contains a timestamp 
and lifetime. if the user wants access to the same service at a later time, the client can simply use the 
previously acquired service-granting ticket and need not bother the user for a password. note that the 
ticket is encrypted with a secret key (k v) known only to the tgs and the server, preventing 
alteration. 
finally, with a particular service-granting ticket, the client can gain access to the corresponding 
service with step 5: 
 
5. the client requests access to a service on behalf of the user. for this purpose, the client transmits a 
message to the server containing the user's id nd the service-granting ticket. the server authenticates 
by using the contents of the ticket. 
this new scenario satisfies the two requirements of only one password query per user session and"
"protection of the user password. 
kerbero  v4 authentication dialogue message exchange 
two additional problems remain in the more secure authentication dialogue: 
lifetime associated with the ticket granting ticket. if the lifetime is very short, then the user 
will be repeatedly asked for a password. if the lifetime is long, then the opponent has the greater 
opportunity for replay. 
    requirement for the servers to authenticate themselves to users. the actual kerberos protocol 
version 4 is as follows: 
•    a basic third-party authentication scheme 
•    have an authentication server (as) 
–    users initially negotiate with as to identify self 
–as provides a non-corruptible authentication credential (ticket granting ticket tgt) 
•    have a ticket granting server (tgs) 
–users subsequently request access to other services from tgs on basis of users 
tgt 
message (1)  client requests ticket-granting ticket  
i dc tells as identity of user from this client 
i dtgs tells as that user requests access to tgs 
ts1 allows as to verify that client's clock is synchronized with that of as 
message (2)  as returns ticket-granting ticket  
kc encryption is based on user's password, enabling as and client to verify 
passwo rd, and protecting contents of m essage(2)
kc,tgs copy of session key accessible to client created by as to permit secure 
exchange between client and tgs without requiring them to share a 
permanent keyi dtgs confirms that this ticket is for the tgs"
the table given below illustrates the mode of dialogue in v4
"ts2 informs client of time this ticket was issued 
lifetime 2 informs client of the lifetime of this ticket 
ticket tgs ticket to be used by client to access tgs 
 (a) authentication service exchange 
message (3)  client requests service-granting ticket  
idv tells tgs that user requests access to server v 
ticket tgs assures tgs that this user has been authenticated by as 
authenticator c generated by client to validate ticket 
message (4)  tgs returns service-granting ticket  
kc,tgs key shared only by c and tgs protects contents of message (4) 
kc,v copy of session key accessible to client created by tgs to permit secure 
exchange between client and server without requiring them to share a 
permanent key idv confirms that this ticket is for server v 
ts4 informs client of time this ticket was issued 
ticket v ticket to be used by client to access server v 
ticket tgs reusable so that user does not have to reenter password 
ktgs ticket is encrypted with key known only to as and tgs, to prevent 
tamp ering 
kc,tgs copy of session key accessible to tgs used to decrypt authenticator, 
thereby authenti cating ticket 
idc indicates the rightful owner of this ticket 
adc prevents use of ticket from workstation other than one that initially 
requested the ti cket 
idtgs assures server that it has decrypted ticket properly 
ts2 informs tgs of time this ticket was issued 
lifetime 2 prevents replay after ticket has expired 
authenticator c assures tgs that the ticket presenter is the same as the client for whom the 
ticket was issued has very short l ifetime to prevent replay 
kc,tgs authenticator is encrypted with key known only to client and tgs, to 
prevent tampering"
"idc must match id in ticket to authenticate ticket 
adc must match address in ticket to authenticate ticket 
ts3 informs tgs of time this authenticator was generated 
 (b) ticket-granting service exchange 
message (5)  client requests service  
ticket v assures server that this user has been authenticated by as 
authenticator c generated by client to validate ticket 
message (6) optional authentication of server to client 
kc,v assures c that this message is from v 
ts5 + 1 assures c that this is not a replay of an old reply 
ticket v reusable so that client does not need to request a new ticket from tgs 
for each access to the s ame server 
kv ticket is encrypted with key known only to tgs and server, to prevent 
tamp ering 
kc,v copy of session key accessible to client; used to decrypt authenticator, 
thereby authenti cating ticket 
idc indicates the rightful owner of this ticket 
adc prevents use of ticket from workstation other than one that initially 
requested the ti cket 
idv assures server that it has decrypted ticket properly 
ts4 informs server of time this ticket was issued 
lifetime 4 prevents replay after ticket has expired 
authenticator c assures server that the ticket presenter is the same as the client for whom 
the tick et was issued; h as very short l ifetime to p revent replay 
kc,v authenticator is encrypted with key known only to client and server, to 
prevent tampering 
idc must match id in ticket to authenticate ticket 
adc must match address in ticket to authenticate ticket 
ts5 informs server of time this authenticator was generated 
 (c) client/server authentication"
kerberos 4 overview
"kerberos  realms and multiple kerberi 
a full-service kerberos environment consisting of a kerberos server, a number of clients, and a 
number of application servers requires the following: 
1.   the  kerberos  server  must  have  the  user  id  and  hashed  passwords  of  all participating 
users in its database. all users are registered with the kerberos server. 
2.   the kerberos server must share a secret key with each server. all servers are registered 
with the kerberos server.such an environment is referred to as a kerberos realm . 
the concept of realm can be explained as follows.  
a kerberos realm is a set of managed nodes that share the same kerberos database. the kerberos"
"database resides on the kerberos master computer system, which should be kept in a physically 
secure room. 
a read-only copy of the kerberos database might also reside on other kerberos computer systems. 
however, all changes to the database must be made on the master computer system. changing or 
accessing the contents of a kerberos database requires the kerberos master password. 
a related concept is that of a kerberos principal, which is a service or user that is known to the 
kerberos system. 
each kerberos principal is identified by its principal name. principal names consist of three parts: a 
service or user name, an instance name, and a realm name 
networks of clients and servers under different administrative organizations typically constitute 
different realms. 
that is, it generally is not practical, or does not conform to administrative policy, to have users and 
servers in one administrative domain registered with a kerberos server elsewhere. 
however, users in one realm may need access to servers in other realms, and some servers 
may be willing to provide service to users from other realms, provided that those users are 
authenticated. 
kerberos provides a mechanism for supporting such interrealm authentication. for two realms to 
support interrealm authentication, a third requirement is added: 
3.   the kerberos server in each interoperating realm shares a secret key with the server in the 
other realm. the two kerberos servers are registered with each other. 
the scheme requires that the kerberos server in one realm trust the kerberos server in the other 
realm to authenticate its users. furthermore, the participating servers in the second realm must also 
be willing to trust the kerberos server in the first realm. 
kerberos version 5  
version 5 of kerberos provides a number of improvements over version 4. 
•    developed in mid 1990’s 
•    provides improvements over v4 
–    addresses environmental shortcomings and technical deficiencies 
•    specified as internet standard rfc 1510"
"differences between version 4 and 5  
version 5 is intended to address the limitations of version 4 in two areas: 
     environmental shortcomings  
o encryption system dependence 
o internet protocol dependence 
o message byte ordering 
o ticket lifetime 
o authentication forwarding 
o inter-realm authenticaiton 
     technical deficiencies  
o double encryption o pcbc encryption o session keys 
o password attacks 
the version 5 authentication dialogue  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
irst, consider the authentication service exchange. message (1) is a client request for a ticket-
granting  ticket.  as  before,  it  includes  the  id  of  the  user  and  the  tgs.  the following new"
"elements are added: 
 
      realm: indicates realm of user 
      options: used to request that certain flags be set in the returned ticket 
      times: used by the client to request the following time settings in the ticket: 
 
from: the desired start time for the requested ticket 
 
till: the requested expiration time for the requested ticket rtime: requested renew-till time 
   nonce : a random value to be repeated in message (2) to assure that the response is fresh 
and has not been replayed by an opponent 
 
message (2) returns a ticket-granting ticket, identifying information for the client, and a block 
encrypted using the encryption key based on the user's password. 
this block includes the session key to be used between the client and the tgs, times specified in 
message (1), the nonce from message (1), and tgs identifying information. 
 
the ticket itself includes the session key, identifying information for the client, the requested time 
values, and flags that reflect the status of this ticket and the requested options. 
 
these flags introduce significant new functionality to version 5. for now, we defer a discussion  of  
these  flags  and  concentrate  on  the  overall  structure  of  the  version  5 protocol. 
 
let us now compare the ticket-granting service exchange for versions 4 and 5. we see that 
message (3) for both versions includes an authenticator, a ticket, and the name of the requested 
service. 
 
in addition, version 5 includes requested times and options for the ticket and a nonce, all with 
functions similar to those of message (1). 
 
the authenticator itself is essentially the same as the one used in version 4. 
 
message (4) has the same structure as message (2), returning a ticket plus information needed by"
"the client, the latter encrypted with the session key now shared by the client and the tgs. 
finally, for the client/server authentication exchange, several new features appear in version 5. in 
message (5), the client may request as an option that mutual authentication is required. the 
authenticator includes several new fields as follows: 
  subkey : the client's choice for an encryption key to be used to protect this specific 
application session. if this field is omitted, the session key from the ticket (k c,v) is used. 
     sequence number : an optional field that specifies the starting sequence number 
to be use may be sequence numbered to detect replays. 
if mutual authentication is required, the server responds with message (6). this message includes 
the timestamp from the authenticator. note that in version 4, the timestamp was incremented by 
one. this is not necessary in version 5 because the nature of the format of messages is such that it is 
not possible for an opponent to create message (6) without knowledge of the appropriate encryption 
keys. 
ticket flags  
the flags field included in tickets in version 5 supports expanded functionality compared to that 
available in version 4. 
overview:  x.509 certificates 
•    issued by a certification authority (ca), containing:  
–    version (1, 2, or 3) 
–    serial number (unique within ca) identifying certificate 
–    signature algorithm identifier"
"–    issuer x.500 name (ca) 
 
–    period of validity (from - to dates) 
 
–    subject x.500 name (name of owner) 
 
–    subject public-key info (algorithm, parameters, key) 
 
–    issuer unique identifier (v2+) 
 
–    subject unique identifier (v2+) 
 
–    extension fields (v3) 
 
–    signature (of hash of all fields in certificate) 
 
•    notation ca<<a>> denotes certificate for a signed by ca  
 
 
 
 
x.509 defines a framework for the provision of authentication services by the x.500 directory to its 
users. the directory may serve as a repository of public-key certificates. each certificate contains 
the public key of a user and is signed with the private key of a trusted certification authority. in 
addition, x.509 defines alternative authentication protocols based on the use of public-key 
certificates. 
 
x.509 is an important standard because the certificate structure and authentication protocols defined 
in x.509 are used in a variety of contexts. for example, the x.509 certificate format is used in 
s/mime), ip security and ssl/tls and set 
 
x.509 is based on the use of public-key cryptography and digital signatures. the standard does  not"
"dictate  the  use  of  a  specific  algorithm  but  recommends  rsa.  the digital signature scheme is 
assumed to require the use of a hash function. 
 
 
certificates  
the heart of the x.509 scheme is the public-key certificate associated with each user. these user 
certificates are assumed to be created by some trusted certification authority (ca) and placed in the 
directory by the ca or by the user. 
      version:  
differentiates among successive versions of the certificate format; the default is version 1. if the 
issuer unique identifier or subject unique identifier are present, the value must be version 2. if one 
or more extensions are present, the version must be version 3. 
      serial number : 
an integer value, unique within the issuing ca, that is unambiguously associated with this 
certificate. 
      signature algorithm identifier : 
the algorithm used to sign the certificate, together with any associated parameters. because this 
information is repeated in the signature field at the end of the certificate, this field has little, if any, 
utility."
"issuer name : 
x.500 name of the ca that created and signed this certificate. 
      period of validity : 
consists of two dates: the first and last on which the certificate is valid. 
      subject name : 
the name of the user to whom this certificate refers. that is, this certificate certifies the public key 
of the subject who holds the corresponding private key. 
      subject's public-key information : 
the public key of the subject, plus an identifier of the algorithm for which this key is to be used, 
together with any associated parameters. 
      issuer unique identifier : 
an optional bit string field used to identify uniquely the issuing ca in the event the 
x.500 name has been reused for different entities."
"subject unique identifier : 
an optional bit string field used to identify uniquely the subject in the event the 
x.500 name has been reused for different entities. 
      extensions:  
a set of one or more extension fields. extensions were added in version 3 and are discussed later in 
this section. 
      signature:  
covers all of the other fields of the certificate; it contains the hash code of the other fields,  
encrypted  with  the  ca's  private  key.  this  field  includes  the  signature algorithm identifie 
 
the standard uses the following notation to define a certificate: ca<<a>> = ca {v, sn, ai, ca, 
ta, a, ap}   where 
y <<x>> = the certificate of user x issued by certification authority y y {i}         = the signing of 
i by y. it consists of i with an encrypted hash code appended 
 
the ca signs the certificate with its private key. if the corresponding public key is known to a user, 
then that user can verify that a certificate signed by the ca is valid. 
 
obtaining a user's certificate  
 
user certificates generated by a ca have the following characteristics: 
 
   any user with access to the public key of the ca can verify the user public key that was 
certified. 
   no party other than the certification authority can modify the certificate without this 
being detected. 
 
ecause certificates are unforgeable, they can be placed in a directory without the need for the 
directory to make special efforts to protect them. 
 
if all users subscribe to the same ca, then there is a common trust of that ca. all user certificates 
can be placed in the directory for access by all users."
"if there is a large community of users, it may not be practical for all users to subscribe to the same 
ca. because it is the ca that signs certificates, each participating user must have a copy of the 
ca's own public key to verify signatures. this public key must be provided to each user in an 
absolutely secure (with respect to integrity and authenticity) way so that the user has confidence in 
the associated certificates. thus, with many users, it may be more practical for there to be a 
number of cas, each of which securely provides its public key to some fraction of the users. 
 
now suppose that a has obtained a certificate from certification authority x 1 and b has obtained a 
certificate from ca x 2. if a does not securely know the public key of x 2, then b's certificate, 
issued by x 2, is useless to a. 
 
a can read b's certificate, but a cannot verify the signature. however, if the two cas have 
securely exchanged their own public keys, the following procedure will enable a to obtain b's 
public key: 
1.   a obtains, from the directory, the certificate of x 2  signed by x 1. because a securely 
knows x 1's public key, a can obtain x 2's public key from its certificate and verify it by means of 
x1's signature on the certificate. 
2.   a then goes back to the directory and obtains the certificate of b signed by x 2 
because a now has a trusted copy of x 2's public key, a can verify the signature  
and securely obtain b's public key. 
 
a has used a chain of certificates to obtain b's public key. in the notation of x.509, this chain is 
expressed as 
 
x1<<x2>> x 2 <<b>> 
 
in the same fashion, b can obtain a's public key with the reverse chain: x 2<<x1>> x 1 <<a>> 
this scheme need not be limited to a chain of two certificates. an arbitrarily long path of 
cas can be followed to produce a chain. a chain with n elements would be expressed as 
 
x1<<x2>> x 2 <<x3>>... x n<<b>>"
"in this case, each pair of cas in the chain (x i,  xi+1) must have created certificates for each 
other. 
 
all these certificates of cas by cas need to appear in the directory, and the user needs to know 
how they are linked to follow a path to another user's public-key certificate. x.509 suggests that 
cas be arranged in a hierarchy so that navigation is straightforward. 
 
figure 14.5 , taken from x.509, is an example of such a hierarchy. the connected circles indicate 
the hierarchical relationship among the cas; the associated boxes indicate certificates maintained 
in the directory for each ca entry. the directory entry for each ca includes two types of 
certificates: 
 
      forward certificates: certificates of x generated by other cas 
      reverse certificates: certificates generated by x that are the certificates of other 
cas 
 
ca hierarchy use  
 
in the  example given below , user a can acquire the following certificates from the directory to 
establish a certification path to b: 
 
x<<w>> w <<v>> v <<y>> <<z>> z <<b>> 
 
when a has obtained these certificates, it can unwrap the certification path in sequence to recover a 
trusted copy of b's public key. using this public key, a can send encrypted"
"messages to b. if a wishes to receive encrypted messages back from b, or to sign messages sent to 
b, then b will require a's public key, which can be obtained from the following certification path: 
 
z<<y>> y <<v>> v <<w>> w <<x>>x <<a>> 
 
b can obtain this set of certificates from the directory, or a can provide them as part of its initial 
message to b. 
 
 
 
certificate revocation  
•    certificates have a period of validity 
•    may need to revoke before expiry, for the following reasons eg: 
1.   user's private key is compromised 
2.   user is no longer certified by this ca 
 
3.   ca's certificate is compromised"
"•    ca’s maintain list of revoked certificates 
1.   the certificate revocation list (crl) 
•    users should check certs with ca’s crl 
 
authentication procedures  
x.509 includes three alternative authentication procedures: 
 
•    one-way authentication  
•    two-way authentication  
•    three-way authentication  
•    all use public-key signatures 
one-way authentication  
•    1 message ( a->b) used to establish 
–    the identity of a and that message is from a 
–    message was intended for b 
–    integrity & originality of message 
•    message must include timestamp, nonce, b's identity and is signed by a 
two-way authentication  
•    2 messages (a->b, b->a) which also establishes in addition: 
–    the identity of b and that reply is from b 
–    that reply is intended for a 
–    integrity & originality of reply 
    reply includes original nonce from a, also timestamp and nonce from b 
three-way authentication 
• 3 messages (a->b, b->a, a->b) which enables above authentication without 
synchronized clocks 
•    has reply from a back to b containing signed copy of nonce from b 
•    means that timestamps need not be checked or relied upon"
"x.509 version 3 
the x.509 version 2 format does not convey all of the information that recent design and 
implementation experience has shown to be needed. [ ford95 ] lists the following requirements not 
satisfied by version 2: 
1.   the subject field is inadequate to convey the identity of a key owner to a public- key user. 
2. the subject field is also inadequate for many applications, which typically recognize entities by 
an internet e-mail address, a url, or some other internet- related identification. 
3.   there is a need to indicate security policy information. there is a need to limit the damage that 
can result from a faulty or malicious ca by setting constraints on the applicability of a particular 
certificate. 
4.   it is important to be able to identify different keys used by the same owner at different 
times. 
the certificate extensions fall into three main categories: key and policy information, subject and 
issuer attributes, and certification path constraints. 
key and policy information 
these extensions convey additional information about the subject and issuer keys, plus indicators of 
certificate policy.. for example, a policy might be applicable to the authentication of electronic 
data interchange (edi) transactions for the trading of goods within a given price range. 
this area includes the following: 
  authority  key  identifier:  identifies  the  public  key to  be  used  to  verify the 
signature on this certificate or crl. 
  subject  key  identifier:  identifies  the  public  key  being  certified.  useful  for subject 
key pair updating. 
  key usage: indicates a restriction imposed as to the purposes for which, and the policies 
under which, the certified public key may be used. 
  private-key  usage  period:  indicates  the  period  of  use  of  the  private  key 
corresponding to the public key.. for example, with digital signature keys, the usage period for the 
signing private key is typically shorter than that for the verifying public key. 
  certificate policies: certificates may be used in environments where multiple policies 
apply."
"policy mappings: used only in certificates for cas issued by other cas. 
certificate  subject and issuer attributes 
these  extensions  support  alternative  names,  in  alternative  formats,  for  a  certificate subject or 
certificate issuer and can convey additional information about the certificate subject, to increase a 
certificate user's confidence that the certificate subject is a particular person or entity. for example, 
information such as postal address, position within a corporation, or picture image may be required. 
the extension fields in this area include the following: 
  subject alternative name: contains one or more alternative names, using any of a variety 
of forms 
  subject directory attributes:  conveys any desired x.500 directory attribute values for 
the subject of this certificate. 
certification  path constraints 
these extensions allow constraint specifications to be included in certificates issued for 
cas by other cas.the extension fields in this area include the following: 
  basic constraints: indicates if the subject may act as a ca. if so, a certification path 
length constraint may be specified. 
  name constraints : indicates a name space within which all subject names in 
subsequent certificates in a certification path must be located. 
  policy  constraints :  specifies  constraints  that  may  require  explicit  certificate policy  
identification  or  inhibit  policy  mapping  for  the  remainder  of  the certification path. 
electronic  mail security pretty good privacy (pgp) 
pgp provides the confidentiality and authentication service that can be used for electronic 
mail and file storage applications. the steps involved in pgp are 
    select the best available cryptographic algorithms as building blocks. 
integrate these algorithms into a general purpose application that is independent of 
operating system and processor and that is based on a small set of easy-to-use commands. 
make  the  package  and  its  documentation,  including  the  source  code,  freely 
available via the internet, bulletin boards and commercial networks. 
enter into an agreement with a company to provide a fully compatible, low cost"
"commercial version of pgp. 
pgp has grown explosively and is now widely used. a number of reasons can be cited for this 
growth.  
· it is available free worldwide in versions that run on a variety of platform.  
· it is based on algorithms that have survived extensive public review and are considered 
extremely secure. 
· e.g., rsa, dss and diffie hellman for public key encryption cast-128, idea and 3des 
for conventional encryption sha-1 for hash coding. 
· it has a wide range of applicability. 
· it was not developed by, nor it is controlled by, any governmental or standards 
organization. 
 
operational description  
the actual operation of pgp consists of five services: authentication, confidentiality, compression, 
e-mail compatibility and segmentation. 
1.   authentication  
the sequence for authentication is as follows: 
     the sender creates the message 
     sha-1 is used to generate a 160-bit hash code of the message 
     the hash code is encrypted with rsa using the sender’s private key and the result is 
prepended to the message 
     the receiver uses rsa with the sender’s public key to decrypt and recover the hash code. 
  the receiver generates a new hash code for the message and compares it with the decrypted 
hash code. if the two match, the message is accepted as authentic. 
2.   confidentiality  
confidentiality is provided by encrypting messages to be transmitted or to be stored locally as 
files.  in both cases,  the  conventional  encryption  algorithm cast-128 may be used. the 64-bit 
cipher feedback (cfb) mode is used. 
in pgp, each conventional key is used only once. that is, a new key is generated as a random 128-
bit number for each message. thus although this is referred to as a session key , it is in reality a one 
time key . to protect the key, it is encrypted with the receiver’s public key. 
the sequence for confidentiality is as follows:"
"· the sender generates a message and a random 128-bit number to be used as a session key for 
this message only. 
· the message is encrypted using cast-128 with the session key. 
· the session key is encrypted with rsa, using the receiver’s public key and is prepended 
to the message. 
· the receiver uses rsa with its private key to decrypt and recover the session key. 
· the session key is used to decrypt the message. 
 
confidentiality and authentication  
here both services may be used for the same message. first, a signature is generated for the 
plaintext message and prepended to the message. then the plaintext plus the signature is 
encrypted using cast-128 and the session key is encrypted using rsa."
"3.   compression  
 
as a default, pgp compresses the message after applying the signature but before  encryption.  this  
has  the  benefit  of  saving  space  for  both  e-mail transmission and for file storage. 
the signature is generated before compression for two reasons: 
 it is preferable to sign an uncompressed message so that one can store only the 
uncompressed message together with the signature for future verification.  if  one  signed  a  
compressed  document,  then  it  would  be necessary either to store a compressed version of the 
message for later verification or to recompress the message when verification is required. 
 even if one were willing to generate dynamically a recompressed message fro verification, pgp’s 
compression algorithm presents a difficulty. the algorithm is not deterministic; various 
implementations of the algorithm achieve different tradeoffs in running speed versus compression 
ratio and as a result, produce different compression forms. 
message encryption is applied after compression to strengthen cryptographic security. because the 
compressed message has less redundancy than the original plaintext, cryptanalysis is more difficult. 
the compression algorithm used is zip. 
4.   e-mail compatibility  
many electronic mail systems only permit the use of blocks consisting of ascii  texts.  to  
accommodate  this  restriction,  pgp  provides  the  service  of converting the raw 8-bit binary 
stream to a stream of printable ascii characters. the scheme used for this purpose is radix-64 
conversion . each group of three octets of binary data is mapped into four ascii characters. 
e.g.,  consider  the  24-bit  (3  octets)  raw  text  sequence  00100011  01011100  
10010001,  we can  express  this  input  in block of 6-bits  to  produce 4  ascii  
characters. 
 
001000            110101            110010            010001 
 
i                        l                     y                    r     => corresponding ascii characters  
5.   segmentation and reassembly  
e-mail facilities often are restricted to a maximum length. e.g., many of the facilities accessible 
through the internet impose a maximum length of 50,000 octets. any message longer than that 
must be broken up into smaller segments, each of which is mailed separately. 
to accommodate this restriction, pgp automatically subdivides a message that is too large into"
"segments that are small enough to send via e-mail. the segmentation  is  done  after  all  the  other  
processing,  including  the  radix-64 conversion.  at  the receiving end,  pgp  must strip  off all  
e-mail  headers and reassemble the entire original block before performing the other steps. 
pgp operation summary: 
cryptographic  keys and key rings 
three separate requirements can be identified with respect to these keys: 
    a means of generating unpredictable session keys is needed. 
    it must allow a user to have multiple public key/private key pairs. 
    each pgp entity must maintain a file of its own public/private key pairs as well as a file of 
public keys of correspondents. 
we now examine each of the requirements in turn. 
1.   session key generation  
each session key is associated with a single message and is used only for the purpose of encryption 
and decryption of that message. random 128-bit numbers are generated using cast-128 itself. 
the input to the random number"
"generator consists of a 128-bit key and two 64-bit blocks that are treated as plaintext to be 
encrypted. using cipher feedback mode, the cast-128 produces two 64-bit cipher text blocks, 
which are concatenated to form the 128-bit session key. the plaintext input to cast-128 is itself 
derived from a stream of 128-bit randomized numbers. these numbers are based on the keystroke 
input from the user. 
2.   key identifiers  
if multiple public/private key pair are used, then how does the recipient know which of the public 
keys was used to encrypt the session key? one simple solution would be to transmit the public key 
with the message but, it is unnecessary  wasteful  of  space.  another  solution  would  be  to  
associate  an identifier with each public key that is unique at least within each user. 
the solution adopted by pgp is to assign a key id to each public key that is, with very high 
probability, unique within a user id. the key id associated with each public key consists of its 
least significant 64 bits. i.e., the key id of public key ku a is (ku a mod 264). 
a message consists of three components . 
 message component – includes actual data to be transmitted, as well as the filename and a 
timestamp that specifies the time of creation. 
 signature component – includes the following 
o timestamp – time at which the signature was made. 
o message digest – hash code. 
o two octets of message digest – to enable the recipient to determine if the correct public key was 
used to decrypt the message. 
o key id of sender’s public key – identifies the public key 
  session key component – includes session key and the identifier of the recipient public key."
"3.   key rings  
pgp provides a pair of data structures at each node, one to store the public/private key pair owned 
by that node and one to store the public keys of the other users known at that node. these data 
structures are referred to as private key ring and public key ring. 
the general structures of the private and public key rings are shown below: timestamp – the 
date/time when this entry was made. 
key id – the least significant bits of the public key. 
 
public key – public key portion of the pair. private key – private key portion of the pair. user id – 
the owner of the key."
"key legitimacy field – indicates the extent to which pgp will trust that this is a valid 
public key for this user.  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
signature trust field – indicates the degree to which this pgp user trusts the signer to certify 
public key. 
owner trust field – indicates the degree to which this public key is trusted to sign other public 
key certificates. 
pgp message generation  
first consider message transmission and assume that the message is to be both signed and 
encrypted. the sending pgp entity performs the following steps:"
"1.   signing the message  
 pgp retrieves the sender’s private key from the private key ring using user id as an index. if user 
id was not provided, the first private key from the ring is retrieved. 
 pgp  prompts  the  user  for  the  passpharse  (password)  to  recover  the unencrypted 
private key. 
     the signature component of the message is constructed. 
2.   encrypting the message  
     pgp generates a session key and encrypts the message. 
     pgp retrieves the recipient’s public key from the public key ring using user 
 
id as index. 
     the session key component of the message is constructed. the receiving pgp entity performs 
the following steps: 
decrypting the message  
     pgp retrieves the receiver’s private key from the private key ring, using the key id field in 
the session key component of the message as an index. 
      pgp  prompts  the  user  for  the  passpharse  (password)  to  recover  the unencrypted 
private key. 
     pgp then recovers the session key and decrypts the message. 
2.   authenticating the message  
     pgp retrieves the sender’s public key from the public key ring, using the key id field in the 
signature key component of the message as an index.  
     pgp recovers the transmitted message digest. 
     pgp computes the message digest for the received message and compares it to the transmitted 
message digest to authenticate. 
public-key management  
this whole business of protecting public keys from tampering is the single most difficult problem in 
practical public key applications. pgp provides a structure for solving this problem, with several 
suggested options that may be used. 
approaches to public-key management  
the essence of the problem is this: user a must build up a public-key ring containing the public 
keys of other users to interoperate with them using pgp. suppose that a's key ring contains a 
public key attributed to b but that the key is, in fact, owned by c. this could happen if, for"
"example, a got the key from a bulletin board system (bbs) that was used by b to post the public 
key but that has been compromised by c. the result is that two threats now exist. first, c can send 
messages to a and forge b's signature, so that a will accept the message as coming from b. 
second, any encrypted message from a to b can be read by c. 
 
a number of approaches are possible for minimizing the risk that a user's public-key ring contains 
false public keys. suppose that a wishes to obtain a reliable public key for b. the following are 
some approaches that could be used: 
 
1.   physically get the key from b. b could store her public key (pu b) on a floppy disk and hand it 
to a. 
2.   verify a key by telephone. if a can recognize b on the phone, a could call b and ask her to 
dictate the key, in radix-64 format, over the phone. 
3.   obtain b's public key from a mutual trusted individual d. for this purpose, the introducer, 
d, creates a signed certificate. the certificate includes b's public key, the time of creation of the 
key, and a validity period for the key. 
4.   obtain b's public key from a trusted certifying authority. again, a public key certificate is 
created and signed by the authority.  a could then access the authority, providing a user name 
and receiving a signed certificate. 
for cases 3 and 4, a would already have to have a copy of the introducer's public key and trust that 
this key is valid. ultimately, it is up to a to assign a level of trust to anyone who is to act as an 
introducer. 
the use of trust  
although pgp does not include any specification for establishing certifying authorities or for 
establishing trust, it does provide a convenient means of using trust, associating trust with public 
keys, and exploiting trust information. 
 
the basic structure is as follows. each entry in the public-key ring is a public-key certificate. 
associated with each such entry is a key legitimacy field that indicates the extent to which 
pgp will trust that this is a valid public key for this user; the higher the level of trust, the stronger 
is the binding of this user id to this key.  
this field is computed by pgp.also associated with the entry are zero or more signatures that the 
key ring owner has collected  that  sign  this  certificate.  in  turn,  each  signature  has  associated"
"with  it  a signature trust field that indicates the degree to which this pgp user trusts the signer to 
certify public keys.the key legitimacy field is derived from the collection of signature trust 
fields in the entry.finally, each entry defines a public key associated with a particular owner, and 
an owner trust field is included that indicates the degree to which this public key is trusted to sign 
other public-key certificates; this level of trust is assigned by the user. 
the three fields mentioned in the previous paragraph are each contained in a structure referred to as 
a trust flag byte. 
suppose that we are dealing with the public-key ring of user a. we can describe the operation of 
the trust processing as follows: 
1.   when a inserts a new public key on the public-key ring, pgp must assign a value to the trust 
flag that is associated with the owner of this public key. if the owner is a, and therefore this public 
key also appears in the private-key ring, then a value of ultimate trust is automatically assigned to 
the trust field. otherwise, pgp asks a for his assessment of the trust to be assigned to the owner of 
this key, and a must enter the desired level. the user can specify that this owner is unknown, 
untrusted, marginally trusted, or completely trusted. 
2.   when the new public key is entered, one or more signatures may be attached to it. 
more signatures may be added later. when a signature is inserted into the entry, pgp searches the 
public-key ring to see if the author of this signature is among the known public-key owners. if 
so, the ownertrust value for this owner is assigned to the sigtrust field for this signature. 
if not, an unknown user value is assigned."
"3.   the value of the key legitimacy field is calculated on the basis of the signature trust fields 
present in this entry. if at least one signature has a signature trust value of ultimate, then the key 
legitimacy value is set to complete. 
 
 
 
the node labeled ""you"" refers to the entry in the public-key ring corresponding to this user. this 
key is legitimate and the ownertrust value is ultimate trust. each other node in the key ring 
has an ownertrust value of undefined unless some other value is assigned by the user. in this 
example, this user has specified that it always trusts the following users to sign other keys: d, e, f, 
l. this user partially trusts users a and b to sign other keys. 
so the shading, or lack thereof, of the nodes in  figure 15.7 indicates the level of trust assigned 
by this user. the tree structure indicates which keys have been signed by which"
"other users. if a key is signed by a user whose key is also in this key ring, the arrow joins the signed 
key to the signatory. if the key is signed by a user whose key is not present in this key ring, the arrow 
joins the signed key to a question mark, indicating that the signatory is unknown to this user. 
note that all keys whose owners are fully or partially trusted by this user have been signed by this 
user, with the exception of node l. 
1.   we assume that two partially trusted signatures are sufficient to certify a key. hence, the key 
for user h is deemed legitimate by pgp because it is signed by a and b, both of whom are partially 
trusted.  
2.   a key may be determined to be legitimate because it is signed by one fully trusted or two partially 
trusted signatories, but its user may not be trusted to sign other keys. for example, n's key is 
legitimate because it is signed by e, whom this user trusts, but n is not trusted to sign other keys 
because this user has not assigned n that  trust  value.  therefore,  although  r's  key  is  signed  by  n,  
pgp  does  not consider r's key legitimate. this situation makes perfect sense. if you wish to send 
a private message to some individual, it is not necessary that you trust that individual in any respect. it 
is only necessary that you are sure that you have the correct public key for that individual. 
3.   figure 15.7 also shows an example of a detached ""orphan"" node s, with two unknown 
signatures. such a key may have been acquired from a key server. pgp cannot assume that this key is 
legitimate simply because it came from a reputable server. the user must declare the key legitimate 
by signing it or by telling pgp that it is willing to trust fully one of the key's signatories. 
s/mime 
s/mime (secure/multipurpose internet mail extension) is a security enhancement to the mime 
internet e-mail format standard, based on technology from rsa data security. s/mime is defined in a 
number of documents, most importantly rfcs 3369, 3370, 3850 and 3851. 
multipurpose internet mail extensions  
mime is an extension to the rfc 822 framework that is intended to address some of the problems and 
limitations of the use of smtp (simple mail transfer protocol) or some other  mail  transfer  protocol  
and  rfc  822  for  electronic  mail.  following  are  the limitations of smtp/822 scheme:"
"1.   smtp cannot transmit executable files or other binary objects. 
2.   smtp  cannot  transmit  text  data  that  includes  national  language  characters because these 
are represented by 8-bit codes with values of 128 decimal or higher, and smtp is limited to 7-bit 
ascii. 
3.   smtp servers may reject mail message over a certain size. 
4.   smtp gateways that translate between ascii and the character code ebcdic do not use a 
consistent set of mappings, resulting in translation problems. 
5.   smtp gateways to x.400 electronic mail networks cannot handle nontextual data included in 
x.400 messages. 
6.   some smtp implementations do not adhere completely to the smtp standards defined in rfc 
821. common problems include: 
o deletion, addition, or reordering of carriage return and linefeed 
o truncating or wrapping lines longer than 76 characters 
o removal of trailing white space (tab and space characters) 
o padding of lines in a message to the same length 
o conversion of tab characters into multiple space characters 
 
mime is intended to resolve these problems in a manner that is compatible with existing rfc 822 
implementations. the specification is provided in rfcs 2045 through 2049. 
overview  
the mime specification includes the following elements: 
1.   five new message header fields are defined, which may be included in an rfc 
822 header. these fields provide information about the body of the message. 
2.   a number of content formats are defined, thus standardizing representations that support 
multimedia electronic mail. 
3.   transfer encodings are defined that enable the conversion of any content format into a form that 
is protected from alteration by the mail system. 
in this subsection, we introduce the five message header fields. the next two subsections deal with 
content formats and transfer encodings. 
the five header fields defined in mime are as follows:  
   mime-version : must have the parameter value 1.0. this field indicates that the message 
conforms to rfcs 2045 and 2046. 
      content-type : describes the data contained in the body with sufficient detail"
"content-transfer-encoding : indicates the type of transformation that has been used to 
represent the body of the message in a way that is acceptable for mail transport. 
      content-id: used to identify mime entities uniquely in multiple contexts. 
   content-description : a text description of the object with the body; this is useful when the 
object is not readable (e.g., audio data). 
mime content types  
the bulk of the mime specification is concerned with the definition of a variety of content types. this 
reflects the need to provide standardized ways of dealing with a wide variety of information 
representations in a multimedia environment. 
table 15.3 lists the content types specified in rfc 2046. there are seven different major types of 
content and a total of 15 subtypes 
 
 
type  subtype  description  
text plain unformatted text; may be ascii or iso 8859. 
 enriched provides greater format flexibility. 
multipart mixed the different parts are independent but are to be transmitted 
together. they should be presented to the receiver in the order 
that they appear in the mail message.   parallel differs from mixed only in that no order is defined for 
delivering the parts to the receiver.  
 alternative the different parts are alternative versions of the same 
information. they are ordered in increasing faithfulness to the 
original, and the recipient's mail system should display the 
 digest similar to mixed, but the default type/subtype of each part is 
message/rfc822.  
message rfc822 the body is itself an encapsulated message that conforms to 
rfc 822.  
 partial used to allow fragmentation o f large mail items, in a way that is 
transparent to the recipient. 
 external- 
body  contains a pointer to an object that exists elsewhere. 
image jpeg the image is in jpeg format, jfif encoding."
"gif the image is in gif format. 
video mpeg mpeg format. 
audio basic single-channel 8-bit isdn mu- law encoding at a sample rate of 
8 khz.  
application postscript adobe postscript. 
 octet- stream  general binary data consisting of 8-bit bytes. 
 
for the text type of body, no special software is required to get the full meaning of the text, aside 
from support of the indicated character set. the primary subtype is plain text, which is simply a 
string of ascii characters or iso 8859 characters. the enriched subtype allows greater formatting 
flexibility. 
 
the multipart type indicates that the body contains multiple, independent parts. the content-type  
header  field  includes  a  parameter,  called  boundary,  that  defines  the delimiter between body parts. 
the multipart/digest subtype is used when each of the body parts is interpreted as an rfc 
822 message with headers. this subtype enables the construction of a message whose parts are 
individual messages. for example, the moderator of a group might collect e- mail  messages  from  
participants,  bundle these  messages,  and  send  them  out  in  one encapsulating mime message. 
 
the message type provides a number of important capabilities in mime. the message/rfc822 subtype 
indicates that the body is an entire message, including header and body. despite the name of this 
subtype, the encapsulated message may be not only a simple rfc 822 message, but also any mime 
message. 
the message/partial subtype enables fragmentation of a large message into a number of parts, which 
must be reassembled at the destination. for this subtype, three parameters are specified in the 
content-type: message/partial field: an id common to all fragments of the same message, a sequence 
number unique to each fragment, and the total number of fragments. 
 
the message/external-body subtype indicates that the actual data to be conveyed in this message are not 
contained in the body. instead, the body contains the information needed to access the data. as with the 
other message types, the message/external-body subtype has  an  outer  header  and  an  encapsulated  
message  with  its  own  header.  the only necessary field in the outer header is the content-type field, 
which identifies this as a message/external-body subtype. the inner header is the message header for"
"the encapsulated message.  the content-type field in the outer header must include an access-type 
parameter, which indicates the method of access, such as ftp (file transfer protocol). 
the application type refers to other kinds of data, typically either uninterpreted binary data or 
information to be processed by a mail-based application. 
mime transfer encodings  
the other major component of the mime specification, in addition to content type specification, is a 
definition of transfer encodings for message bodies. the objective is to provide reliable delivery across 
the largest range of environments. 
the mime standard defines two methods of encoding data. the content-transfer- encoding field can 
actually take on six values, as listed in table 15.4 . for smtp transfer, it is safe to use the 7bit form. 
the 8bit and binary forms may be usable in other mail transport contexts. another content-
transfer-encoding value is x-token, which indicates that some other encoding scheme is used, for 
which a name is to be supplied. the two actual encoding schemes defined are quoted-printable and 
base64. 
 mime transfer encodings  
7bit the data are all represented by short lines of ascii characters. 
8bit the lines are short, but there may be non-ascii characters (octets with the 
high-order bit set ). 
binary not on ly may non-ascii characters be present but the lines are not 
necessarily short enough for smtp  transport.  
quoted- 
printable encodes the data in such a way that if the data being encoded are mostly 
ascii text, the encoded form of the data remains largely recognizable by 
humans.  base64 encodes data by mapping 6-bit blocks of input to 8-bit blocks of output, all 
of which are printable  ascii characters. 
x-token a named nonstandard encoding. 
 
 
 
 
the quoted-printable transfer encoding is useful when the data consists largely of octets that 
correspond to printable ascii characters. in essence, it represents nonsafe characters by the 
hexadecimal representation of their code and introduces reversible (soft) line breaks to limit 
message lines to 76 characters."
"the base64 transfer encoding, also known as radix-64 encoding, is a common one for encoding 
arbitrary binary data in such a way as to be invulnerable to the processing by mail transport programs. 
canonical form  
an important concept in mime and s/mime is that of canonical form. canonical form is a format, 
appropriate to the content type that is standardized for use between systems. this is in contrast to 
native form, which is a format that may be peculiar to a particular system. 
s/mime functionality  
in terms of general functionality, s/mime is very similar to pgp. both offer the ability to sign and/or 
encrypt messages. in this subsection, we briefly summarize s/mime capability. we then look in more 
detail at this capability by examining message formats and message preparation. 
functions  
s/mime provides the following functions: 
  enveloped data: this consists of encrypted content of any type and encrypted- content 
encryption keys for one or more recipients. 
  signed data : a digital signature is formed by taking the message digest of the content to 
be signed and then encrypting that with the private key of the signer. the content plus signature are 
then encoded using base64 encoding. a signed data message can only be viewed by a recipient with 
s/mime capability. 
  clear-signed data: as with signed data, a digital signature of the content is formed. 
however, in this case, only the digital signature is encoded using base64. as a result, recipients 
without s/mime capability can view the message content, although they cannot verify the signature. 
  signed and enveloped data: signed-only and encrypted-only entities may be nested, so 
that encrypted data may be signed and signed data or clear-signed data may be encrypted. 
cryptographic  algorithms 
•    hash functions: sha-1 & md5 
•    digital signatures: dss & rsa 
•    session key encryption: elgamal & rsa 
•    message encryption: triple-des, rc2/40 and others 
•    have a procedure to decide which algorithms to use."
"table 15.6 summarizes the cryptographic algorithms used in s/mime. s/mime uses the following 
terminology, taken from rfc 2119 to specify the requirement level: 
   must:  the  definition  is  an  absolute  requirement  of  the  specification.  an 
implementation must include this feature or function to be in conformance with the specification. 
   should: there may exist valid reasons in particular circumstances to ignore this feature or 
function, but it is recommended that an implementation include the feature or function. 
s/mime messages  
s/mime makes use of a number of new mime content types, which are shown in  table  
15.7. all of the new application types use the designation pkcs. this refers to a set of public-key 
cryptography specifications issued by rsa laboratories and made available for the s/mime effort. 
 
 
function  requirement  
create a message digest to be used in 
forming a digital signature. 
 
encrypt message digest to form 
digital signature. must support sha-1. 
 
receiver should support md5 for backward 
compatibility. 
 
sending and receiving agents must support dss. 
sending agents should support rsa encryption. 
receiving agents should supp ort verification of  
encrypt session key for transmissi on 
with message. sending and receiving agents should support 
diffie-hellman. 
 
sending  and receiving agents must support rsa 
encrypt message for transmission 
with one-time session key. sending and receiving agents must support 
encryption with triple des 
 
sending agents should support encryption with 
aes."
"create a message authentication c odereceiving agents must support hmac with 
sha-1. 
receiving agents should supp ort hm ac with
type  subtype  smime parameter  description
multipart signed a clear-signed message in two pa rts: one is 
the message and the other is the signature. 
application pkcs 7- mime signeddata a signed s/mime entity. 
pkcs 7- mime envelopeddata an encrypted s/mime entity. 
pkcs 7- mime degenerate 
signeddataan entity containing only public- key 
certificates.
pkcs 7- mime compresseddata a compressed s/mime entity 
pkcs 7- 
signaturesigneddata the content type of the signature subpa rt of
amultipart/signed me ssage.
we examine each of these in turn after first looking at the general procedures for 
s/mime message preparation. 
securing  a mime entity 
s/mime secures a mime entity with a signature, encryption, or both. a mime entity may be an 
entire message (except for the rfc 822 headers), or if the mime content type is multipart, then a 
mime entity is one or more of the subparts of the message. in all cases, the message to be sent is 
converted to canonical form. in particular, for a given type and subtype, the appropriate canonical 
form is used for the message content. for a multipart message, the appropriate canonical form is used"
"for each subpart. 
the use of transfer encoding requires special attention. 
 
i)envelopeddata  
an application/pkcs7-mime subtype is used for one of four categories of s/mime processing, each 
with a unique smime-type parameter. in all cases, the resulting entity, referred to as an object, is 
represented in a form known as basic encoding rules (ber), which is defined in itu-t 
recommendation x.209. the steps for preparing an envelopeddata mime entity are as follows: 
1. generate a pseudorandom session key for a particular symmetric encryption algorithm (rc2/40 or 
triple des). 
2.   for each recipient, encrypt the session key with the recipient's public rsa key. 
3. for each recipient, prepare a block known as recipient info that contains an identifier of  the  
recipient's  public-key  certificate,[3]   an  identifier  of  the  algorithm  used  to encrypt the session key, 
and the encrypted session key. 
this is an x.509 certificate, discussed later in this section. 
4.   encrypt the message content with the session key. 
the   recipientinfo   blocks   followed   by   the   encrypted   content   constitute   the envelopeddata. 
this information is then encoded into base64. to recover the encrypted message, the recipient first 
strips off the base64 encoding. then the recipient's private key is used to recover the session key. 
finally, the message content is decrypted with the session key. 
ii)signeddata  
the signeddata smime-type can actually be used with one or more signers. for clarity, we  confine  
our  description  to  the  case  of  a  single  digital  signature.  the  steps  for preparing a signeddata 
mime entity are as follows: 
 
 
1.   select a message digest algorithm (sha or md5). 
2.   compute the message digest, or hash function, of the content to be signed. 
3.   encrypt the message digest with the signer's private key. 
4. prepare a block known as signerinfo that contains the signer's public-key certificate, an identifier 
of the message digest algorithm, an identifier of the algorithm used to encrypt the message digest, and 
the encrypted message digest."
"the signeddata entity consists of a series of blocks, including a message digest algorithm identifier, the 
message being signed, and signerinfo. the signeddata entity may also include a set of public-key 
certificates sufficient to constitute a chain from a recognized root or top-level certification authority 
to the signer. this information is then encoded into base64. 
 
to recover the signed message and verify the signature, the recipient first strips off the base64 
encoding. then the signer's public key is used to decrypt the message digest. the recipient 
independently computes the message digest and compares it to the decrypted message digest to verify 
the signature. 
 
iii)clear signing  
  clear signing is achieved using the multipart content type with a signed subtype. 
   as  was  mentioned,  this  signing  process  does  not  involve  transforming  the message to be 
signed, so that the message is sent ""in the clear."" 
  thus, recipients with mime capability but not s/mime capability are able to read the 
incoming message. 
a multipart/signed message has two parts. the first part can be any mime type but must be prepared 
so that it will not be altered during transfer from source to destination. this means that if the first part 
is not 7bit, then it needs to be encoded using base64 or quoted- printable. then this part is processed 
in the same manner as signeddata, but in this case an object with signeddata format is created that 
has an empty message content field. this object is a detached signature. it is then transfer encoded 
using base64 to become the second part of the multipart/signed message. this second part has a 
mime content type of application and a subtype of pkcs7-signature 
 
the protocol parameter indicates that this is a two-part clear-signed entity. the receiver can verify the 
signature by taking the message digest of the first part and comparing this to the message digest 
recovered from the signature in the second part. 
 
registration request  
 
   typically,  an  application  or user will  apply to  a certification  authority for  a public-key 
certificate. 
   the application/pkcs10 s/mime entity is used to transfer a certification request."
"the certification request includes certificationrequestinfo block, followed by an identifier of the 
public-key encryption algorithm, followed by the signature of the certificationrequestinfo block, made 
using the sender's private key. 
the certificationrequestinfo block includes a name of the certificate subject (the entity whose 
public key is to be certified) and a bit-string representation of the user's public key. 
certificates-only message  
a message containing only certificates or a certificate revocation list (crl) can be sent in response 
to a registration request. the message is an application/pkcs7-mime type/subtype with an smime-type 
parameter of degenerate. the steps involved are the same as those for creating a signeddata message, 
except that there is no message content and the signerinfo field is empty. 
s/mime certificate processing 
s/mime uses public-key certificates that conform to version 3 of x.509 the key- management scheme 
used by s/mime is in some ways a hybrid between a strict x.509 certification hierarchy and pgp's web 
of trust. as with the pgp model, s/mime managers and/or users must configure each client with a list 
of trusted keys and with certificate revocation lists. 
*user agent role  
an s/mime user has several key-management functions to perform: 
  key  generation:  the  user  of  some  related  administrative  utility  (e.g.,  one associated 
with lan management) must be capable of generating  a key pair from a   good source of 
nondeterministic random input and be protected in a secure fashion. a user agent should 
generate rsa key pairs with a length in the range of 768 to 1024 bits and must not generate a 
length of less than 512 bits. 
  registration: a user's public key must be registered with a certification authority in order to 
receive an x.509 public-key certificate. 
  certificate  storage  and  retrieval:  a  user  requires  access  to  a  local  list  of certificates 
in order to verify incoming signatures and to encrypt outgoing messages. such a list could be 
maintained by the user or by some local administrative entity on behalf of a number of users. 
*verisign certificates  
there are several companies that provide certification authority (ca) services. for example,  nortel  
has  designed  an  enterprise  ca  solution  and  can  provide  s/mime support within an organization."
"there are a number of internet-based cas, including verisign, gte,  and the u.s. postal service. 
of these, the most widely used is the verisign ca service, a brief description of which we now 
provide. 
 
verisign provides a ca service that is intended to be compatible with s/mime and a variety of other 
applications. verisign issues x.509 certificates with the product name verisign digital id. as of early 
1998, over 35,000 commercial web sites were using verisign server digital ids, and over a million 
consumer digital ids had been issued to users of netscape and microsoft browsers. 
 
the information contained in a digital id depends on the type of digital id and its use. at a 
minimum, each digital id contains 
      owner's public key 
      owner's name or alias 
      expiration date of the digital id 
      serial number of the digital id 
      name of the certification authority that issued the digital id 
      digital signature of the certification authority that issued the digital id 
 
digital ids can also contain other user-supplied information, including  
      address 
      e-mail address 
      basic registration information (country, zip code, age, and gender) 
 
verisign provides three levels, or classes, of security for public-key certificates. a user requests a 
certificate online at verisign's web site or other participating web sites. class 
1 and class 2 requests are processed on line, and in most cases take only a few seconds to approve. 
briefly, the following procedures are used: 
   for class 1 digital ids, verisign confirms the user's e-mail address by sending a pin and 
digital id pick-up information to the e-mail address provided in the application. 
   for class  2  digital  ids,  verisign  verifies  the information  in  the application through an 
automated comparison with a consumer database in addition to performing all of the checking 
associated with a class 1 digital id. finally, confirmation is sent to the specified postal address 
alerting the user that a digital id has been issued in his or her name."
"for class 3 digital ids, verisign requires a higher level of identity assurance. an individual 
must prove his or her identity by providing notarized credentials or applying in person. 
enhanced  security services 
as of this writing, three enhanced security services have been proposed in an internet draft.: 
    signed receipts: a signed receipt may be requested in a signeddata object. 
returning  a  signed  receipt  provides  proof  of  delivery  to  the  originator  of  a message and allows 
the originator to demonstrate to a third party that the recipient received the message. 
  security labels : a security label may be included in the authenticated attributes of a 
signeddata object. a security label is a set of security information regarding the sensitivity of the 
content that is protected by s/mime encapsulation. the labels may be used for access control, by 
indicating which users are permitte access to an object. 
  secure mailing lists: when a user sends a message to multiple recipients, a certain 
amount of per-recipient processing is required, including the use of each recipient's public key. the 
user can be relieved of this work by employing the services of an s/mime mail list agent (mla). an 
mla can take a single incoming message, perform the recipient-specific encryption for each recipient, 
and forward the message. the originator of a message need only send the message to the mla, with 
encryption performed using the mla's public key. 
key management 
· all cryptographic systems have the problem of how to securely and reliably distribute the keys 
used  
· in many cases, failures in a secure system are due not to breaking the algorithm, but to breaking the 
key distribution scheme  
· ideally the distribution protocol should be formally verified, recent advances make this more 
achievable  
· possible key distribution techniques include:  
· physical delivery by secure courier eg code-books used submarines  
· one-time pads used by diplomatic missions  
· registration name and password for computers"
"· authentication key server (private key, eg kerberos) have an on-line server trusted by all clients 
server has a unique secret key shared with each client server negotiates keys on behalf of clients  
· public notary (public key, eg spx) have an off-line server trusted by all clients  
· server has a well known public key   
· server signs public key certificates for each client  
authentication  protocols 
· if using a key server, must use some protocol between user and server  
· this protocol should be validated, formal techniques exist to acheive this (ban logic provers  
challenge -response 
· basic technique used to ensure a password is never sent in the clear  
· given a client and a server share a key  
o server sends a random challenge vector  
o client encrypts it with private key and returns this  
o server verifies response with copy of private key  
· can repeat protocol in other direction to authenticate server to client (2-way authentication)  
· in simplest form, keys are physically distributed before secure comminications is required  
· in more complex forms, keys are stored in a central trusted key server  
needham -schroeder 
· original third-party key distribution protocol  
r m needham, m d schroeder, ""using encryption for authentication in large networks of 
computers"", cacm, 21(12), dec 1978, pp993-998  
· given alice want to communicate with bob, and have a key server s, protocol is:  
message 1 a -> s a, b, n a  
message 2 s -> a e kas{na , b, k ab, ekbs{kab, a} }"
"message 3 a -> b e kbs{kab, a}  
message 4 b -> a e kab{nb}  
message 5 a-> b e kab{nb-1}  
nb: n a is a random value chosen by alice, n b random chosen by bob  
· after this protocol runs, alice and bob share a secret session key k ab for secure communicatio n  
o including a timestamp in messages 1 to 3, which requires synchronized clocks (by 
denning & sacco 81)  
o having a ask b for a random value jb to be sent to s for return in e kbs{kab, a, jb} (by 
needham & schroeder 87)  
· many other protocols exist but care is needed  
key  management 
•   public-key encryption helps address key distribution problems 
•   have two aspects: 
o distribution of public keys 
o use of public-key encryption to distribute secret 
keys distribution of public keys  
distribution of public keys can be done in one of the four ways: 
    public announcement 
    publicly available directory 
    public-key authority 
    public-key certificates 
public  announcement 
• users distribute public keys to recipients or broadcast to community at large 
o eg. append pgp keys to email messages or post to news groups or email list 
• major weakness is forgery 
o anyone can create a key claiming to be someone else and broadcast 
it 
o until forgery is discovered can masquerade as claimed user 
4.9.5 public-key certificates"
"• certificates allow key exchange without real-time access to public-key authority 
• a certificate binds identity to public key  
o usually with other info such as period of validity, rights of use etc 
• with all contents signed by a trusted public-key or certificate authority (ca) 
• can be verified by anyone who knows the public-key authorities public-key 
 
 
 
publicly available directory  
• can obtain greater security by registering keys with a public directory 
 
• directory must be trusted with properties: 
 
o contains {name, public-key} entries 
o participants register securely with directory 
o participants can replace key at any time 
o directory is periodically published 
o directory can be accessed electronically 
• still vulnerable to tampering or forgery 
public-key authority  
• improve security by tightening control over distribution of keys from directory 
• has properties of directory 
• requires users to know public key for the directory"
"• users interact with directory to obtain any desired public key securely 
o does require real-time access to directory when keys are needed 
 kerberos - an example of a key server 
· trusted key server system developed by mit  
· provides centralised third-party authentication in a distributed network  
· access control may be provided for each computing resource in either a local or remote network 
(realm) has a key distribution centre (kdc), containing a database of:  
o principles (customers and services)  
o encryption keys  
· basic third-party authentication scheme  
· kdc provides non-corruptible authentication credentials (tickets or tokens)  
kerberos  - initial user authentication 
· user requests an initial ticket from kdc  
· used as basis for all remote access requests  
kerberos  - request for a remote service"
"· user requests access to a remote service  
o obtains a ticket from kdc protected with remote key  
o sends ticket with request to remote server  
kerberos  - in practise 
· currently have two kerberos versions  
o 4 : restricted to a single realm  
o 5 : allows inter-realm authentication, in beta test  
kerberos v5 is an internet standard specified in rfc1510, and used by many utilities to use kerberos 
need to have a kdc on your network need to have applications running on all participating systems 
major problem - us export restrictions  
kerberos cannot be directly distributed outside the us in source format (& binary versions must 
obscure crypto routine entry points and have no encryption) else crypto libraries must be 
reimplemented locally  
x.509 - directory authentication service 
· part of ccitt x.500 directory services defines framework for authentication services  
· directory may store public-key certificates uses public-key cryptography and digital signatures 
algorithms not standardized but rsa is recommended  
x.509 certificate 
· issued by a certification authority (ca) each certificate contains:  
o version  
o serial number (unique within ca)"
"o algorithm identifier (used to sign certificate)  
o issuer (ca)  
o period of validity (from - to dates)  
o subject (name of owner)  
o public-key (algorithm, parameters, key)  
o signature (of hash of all fields in certificate)  
· any user with access to ca can get any certificate from it  
· only the ca can modify a certificate  
ca hierarchy 
· ca form a hierarchy  
· each ca has certificates for clients and parent  
· each client trusts parents certificates  
· enable verification of any certificate from one ca by users of all other cas in hierarchy  
· x<<a>> means certificate for a signed by authority x  
· a acquires b certificate following chain:  
· x<<w>>w<<v>>v<<y>>y<<z>>z<<b>>  
· b acquires a certificate following chain:  
· z<<y>>y<<v>>v<<w>>w<<x>>x<<a>>  
authentication  procedures 
· x.509 includes three alternative authentication procedures"
"one-way authentication   
· 1 message ( a->b) to establish  
o identity of a and that messages is from a  
o message intended for b  
o integrity & originality of message  
two-way authentication   
· 2 messages (a->b, b->a) which also establishes  
o identity of b and that replay is from b  
o reply intended for a  
o integrity & originality of reply  
three-way authentication   
· 3 messages (a->b, b->a, a->b) which enables  
o above authentication without syncronised clocks  
diffie -hellman key exchange 
the purpose of the algorithm is to enable two users to exchange a key securely that can then be used 
for subsequent encryption of messages. 
the  diffie-hellman  algorithm  depends  for  its  effectiveness  on  the  difficulty  of computing 
discrete logarithms. first, we define a primitive root of a prime number p as one whose power generate 
all the integers from 1 to (p-1) i.e., if „a‟ is a primitive root of a prime number p, then the numbers 
a mod p, a2 mod p, … ap-1 mod p are distinct and consists of integers from 1 to (p-1) in some 
permutation. for any integer „ b‟ and a primitive root „a‟ of a prime number „ p‟, we can find a unique 
exponent „i‟ such that 
b ≡ ai mod p where 0 ≤ i ≤ (p-1)"
"the exponent „i‟ 
is referred to as discrete logarithm. with this background, we can define 
 
diffie hellman key exchange as follows: 
 
there are publicly known numbers: a prime number „q‟ 
and an integer α that is primitive root of q. 
suppose users a and b wish to exchange a key. user a selects a random integer x a < q and computes 
ya = α xa mod q. similarly, user b independently selects a random 
integer x b < q and computes y b = α xb mod q. each side keeps the x value private and  
makes the y value available publicly to the other side. user a computes the key as 
k = (y b)xa mod q and 
user b computes the key as 
k = (y a)xb mod q 
these two calculations produce identical results. 
k = (y b)xa mod q 
= (α xb mod q)xa mod q 
 
= (α xb)xa mod q 
= (α xa)xb mod q 
= (α xa mod q)xb mod q 
= (ya)xb mod q 
the result is that two sides have exchanged a secret key. 
the security of the algorithm lies in the fact that, while it is relatively easy to calculate exponentials 
modulo a prime, it is very difficult to calculate discrete logarithms. for large 
primes, the latter task is considered infeasible."
"fig: diffie hellman key exchange  
4 security in practise - secure email 
· email is one of the most widely used and regarded network services  
· currently message contents are not secure  
o may be inspected either in transit  
o or by suitably priviledged users on destination system  
· email privacy enhancement services  
o confidentiality (protection from disclosure)  
o authentication (of originator)  
o message integrity (protection from modification)  
o non-repudiation of origin  
o (protection from denial by sender)  
· can't assume real-time access to a trusted key server  
· often implement using email encapsulation"
"pem  
· privacy enhanced mail  
· internet standard for security enhancements to internet (rfc822) email  
o developed by a working group of the ietf  
o specified in rfc1421, rfc1422, rfc1423, rfc1424  
· uses message encapsulation to add features  
· confidentiality - des encryption in cbc mode  
· integrity - des encrypted mic (md2/md5)  
· authentication - des/rsa encrypted mic  
· non-repudiation - rsa encrypted mic  
pem  - key management 
· central key server (private-key)  
o requires access to on-line server  
· public-key certificates  
o uses x.509 directory service strong authentication to protect key certificates  
o signed by a certification authority (ca)  
o cas form a hierarchy to permit cross-validation of certificates  
o cas must be licenced by rsa data inc.  
o currently only licensed in us/canada  
pgp  
· pretty good privacy  
· widely used de facto secure email standard  
o developed by phil zimmermann"
"o available on unix, pc, macintosh and amiga systems  
o free!!!!  
· confidentiality - idea encryption  
· integrity - rsa encrypted mic (md5)  
· authentication & non-repudiation - rsa encrypted mic  
· uses grass-roots key distribution  
o trusted introducers used to validate keys  
o no certification authority hierarchy needed  
pgp  - in use 
· all pgp functions are performed by a single program  
· must be integrated into existing email/news  
· each user has a keyring of known keys  
o containing their own public and private keys (protected by a password)  
o public keys given to you directly by a person  
o public keys signed by trusted introducers  
· used to sign/encrypt your messages  
· used to validate messages received  
sample  pgp message 
-----begin pgp signed message----- 
may all your signals trap 
may your references be bounded 
all memory aligned 
floats to ints be rounded"
"lawrie 
-----begin pgp signature----- 
version: 2.3 
iqbzagubldl1rilpoub8ek7faqf2nwlujwvph8iifrksxsce6z37zdv37pxvsyyz0wancbcdpu55
yid5/kvhmvusto10zuhpsspwb99tqq9ysdusfkveiljfjnjeuuwqkjl8dwvab+iieeodf0xpbc23krn
uoa== 
=hn90 
-----end pgp signature----- 
pgp  - issues 
· were questions of legality, but pgp may now be legally used by anyone in the world:  
o noncommercial use in us/canada with licenced mit version  
o commercial use in us/canada with viacrypt version  
o noncommercial use outside the us is probably legal with (non us sourced) international version  
o commercial use outside the us requires an idea licence for the international version  
· is on-going legal battle in us over its original export between us govt and phil zimmermann  
security  in practice - snmp 
· snmp is a widely used network management protocol  
· comprises  
o management station  
o management agent with  
o its management information base (mib)  
o linked by network management protocol (get,set)  
· snmp v1 lacks any security (get and set open if there)  
· snmp v2 includes security extensions for  
o message authentication (keyed md5)"
"o message secrecy (des)  
· based on the snmpv2 party  (sender & receiver roles)  
o used for access control & key management  
o all associated information stored in a party mib  
· assumes syncronised clocks (within a set interval)  
 user authentication 
· user authentication (identity verification)  
o convince system of your identity  
o before it can act on your behalf  
· sometimes also require that the computer verify its identity with the user  
· user authentication is based on three methods  
o what you know  
o what you have  
o what you are  
· all then involve some validation of information supplied against a table of possible values based 
on users claimed identity  
what  you know 
passwords  or pass-phrases 
· prompt user for a login name and password  
· verify identity by checking that password is correct"
"· on some (older) systems, password was stored in the clear (this is now regarded as insecure, 
since breakin compromises all users of the system)  
o more often use a one-way function, whose output cannot easily be used to find the input 
value either takes a fixed sized input (eg 8 chars)  
o or based on a hash function to accept a variable sized input to create the value  
· important that passwords are selected with care to reduce risk of exhaustive search  
denning computer (in) security fig 2 & 3, pp111-12  
one-shot passwords 
· one problem with traditional passwords is caused by eavesdropping theit transfer over an 
insecure network  
· one possible solution is to use one-shot (one-time) passwords  
· these are passwords used once only  
· future values cannot be predicted from older values  
either generate a printed list, and keep matching list on system to be accessed (cf home banking) or use 
an algorithm based on a one-way function f (eg md5) to generate previous values in series (eg skey)  
· start with a secret password s, and number n 
o p_( 0) = fn(s) 
· next password in series is 
o p_( 1) = fn-1(s) 
· must reset password after n uses 
generally good only for infrequent access"
"intruders  
one of the most publicized attacks to security is the intruder, generally referred to as hacker or 
cracker. three classes of intruders are as follows: 
· masquerader – an individual who is not authorized to use the computer and who penetrates a 
system’s access controls to exploit a legitimate user’s account. 
  misfeasor – a legitimate user who accesses data, programs, or resources for which such 
access is not authorized, or who is authorized for such access but misuse his or her privileges. 
  clandestine user – an individual who seizes supervisory control of the system and uses 
this control to evade auditing and access controls or to suppress audit collection. 
the masquerader is likely to be an outsider; the misfeasor generally is an insider; and the clandestine 
user can be either an outsider or an insider. 
intruder attacks range from the benign to the serious. at the benign end of the scale, there are many 
people who simply wish to explore internets and see what is out there. at the serious end are 
individuals who are attempting to read privileged data, perform unauthorized modifications to data, or 
disrupt the system.  benign intruders might be tolerable, although they do consume resources and may 
slow performance for legitimate users. however there is no way in advance to know whether an 
intruder will be benign or malign. 
an analysis of previous attack revealed that there were two levels of hackers:  
the  high  levels  were  sophisticated  users  with  a  thorough  knowledge  of  the technology. 
the low levels were the ‘foot soldiers’ who merely use the supplied cracking 
programs with little understanding of how they work. 
one of the results of the growing awareness of the intruder problem has been the establishment of a 
number of computer emergency response teams (cert). these co- operative ventures collect 
information about system vulnerabilities and disseminate it to systems managers. unfortunately, 
hackers can also gain access to cert reports. 
in addition to running password cracking programs, the intruders attempted to modify login software to 
enable them to capture passwords of users logging onto the systems. 
intrusion techniques  
the objective of the intruders is to gain access to a system or to increase the range of privileges"
"accessible on a system. generally, this requires the intruders to acquire information that should be 
protected. in most cases, the information is in the form of a user password. 
typically, a system must maintain a file that associates a password with each authorized user. if such a 
file is stored with no protection, then it is an easy matter to gain access to it. the password files can be 
protected in one of the two ways: 
  one  way  encryption  –  the  system  stores  only  an  encrypted  form  of  user’s password. 
in practice, the system usually performs a one way transformation (not reversible) in which the 
password is used to generate a key for the encryption function and in which a fixed length output is 
produced. 
  access control – access to the password file is limited to one or a very few accounts. 
the following techniques are used for learning passwords.  
try default passwords used with standard accounts that are shipped with the system. 
many administrators do not bother to change these defaults. 
    exhaustively try all short passwords. 
    try words in the system’s online dictionary or a list of likely passwords. 
collect information about users such as their full names, the name of their spouse and 
children, pictures in their office and books in their office that are related to hobbies. 
    try user’s phone number, social security numbers and room numbers. 
    try all legitimate license plate numbers. 
    use a torjan horse to bypass restriction on access. 
    tap the line between a remote user and the host system. two principle countermeasures: 
    detection – concerned with learning of an attack, either before or after its success. 
    prevention – challenging security goal and an uphill bottle at all times. 
intrusion  detection: 
inevitably, the best intrusion prevention system will fail. a system's second line of defense is intrusion 
detection, and this has been the focus of much research in recent years. this interest is motivated by a 
number of considerations, including the following: 
1.   if an intrusion is detected quickly enough, the intruder can be identified and ejected from the 
system before any damage is done or any data are compromised. 
2.   an effective intrusion detection system can serve as a deterrent, so acting to prevent intrusions."
"3.   intrusion detection enables the collection of information about intrusion techniques that can be 
used to strengthen the intrusion prevention facility. 
intrusion detection is based on the assumption that the behavior of the intruder differs from that of a 
legitimate user in ways that can be quantified. 
figure 18.1 suggests, in very abstract terms, the nature of the task confronting the designer of an 
intrusion detection system. although the typical behavior of an intruder differs from the typical 
behavior of an authorized user, there is an overlap in these behaviors. thus, a loose interpretation of 
intruder behavior, which will catch more intruders, will also lead to a number of ""false positives,"" or 
authorized users identified as intruders. on the other hand, an attempt to limit false positives by a tight 
interpretation of intruder behavior will lead to an increase in false negatives, or intruders not 
identified as intruders. thus, there is an element of compromise and art in the practice of intrusion 
detection. 
 identifies the following approaches to intrusion detection:  
1. statistical anomaly detection : involves the collection of data relating to the behavior of 
legitimate users over a period of time. then statistical tests are applied to observed behavior to"
"determine with a high level of confidence whether that behavior is not legitimate user behavior. 
a.   threshold    detection :    this    approach    involves    defining    thresholds, independent of user, 
for the frequency of occurrence of various events. 
b.   profile based: a profile of the activity of each user is developed and used to detect changes in the 
behavior of individual accounts. 
2.   rule-based detection : involves an attempt to define a set of rules that can be used to decide that a 
given behavior is that of an intruder. 
a.   anomaly detection : rules are developed to detect deviation from previous usage patterns. 
 
b.   penetration  identification :  an  expert  system  approach  that  searches  for suspicious behavior. 
in terms of the types of attackers listed earlier, statistical anomaly detection is effective against  
masqueraders.  on  the  other  hand,  such  techniques  may be  unable  to  deal  with misfeasors. for 
such attacks, rule-based approaches may be able to recognize events and sequences  that,  in  context,  
reveal  penetration.  in  practice,  a  system  may  exhibit  a combination of both approaches to be 
effective against a broad range of attacks.  
audit records  
a fundamental tool for intrusion detection is the audit record. some record of ongoing activity 
by users must be maintained as input to an intrusion detection system. basically, two plans are used: 
   native audit records : virtually all multiuser operating systems include accounting software 
that collects information on user activity. the advantage of using this information is that no additional 
collection software is needed. the disadvantage is that the native audit records may not contain the 
needed information or may not contain it in a convenient form. 
   detection-specific  audit  records :  a  collection  facility  can  be  implemented  that 
generates audit records containing only that information required by the intrusion detection system. 
one advantage of such an approach is that it could be made vendor independent  and  ported  to  a  
variety  of  systems.  the  disadvantage  is  the  extra overhead  involved  in  having,  in  effect,  two  
accounting  packages  running  on  a machine. 
each audit record contains the following fields:  
   subject: initiators of actions. a subject is typically a terminal user but might also be a 
process acting on behalf of users or groups of users. 
      object: receptors of actions. examples include files, programs, messages, records, terminals, 
printers, and user- or program-created structures 
   resource-usage : a list of quantitative elements in which each element gives the amount"
"used of some resource (e.g., number of lines printed or displayed, number of records read or written, 
processor time, i/o units used, session elapsed time). 
     time-stamp : unique time-and-date stamp identifying when the action took place. 
most user operations are made up of a number of elementary actions. for example, a file copy 
involves the execution of the user command, which includes doing access validation and setting up 
the copy, plus the read from one file, plus the write to another file. consider the command 
copy game.exe to <library>game.exe 
issued  by  smith  to  copy  an  executable  file  game  from  the  current  directory  to  the 
<library> directory. the following audit records may be generated:  
smith execute <library>copy.exe 0 cpu = 00002 11058721678 
smith read <smith>game.exe 0 records = 0 11058721679 
smith execute <library>copy.exe write-viol records = 0 11058721680 
in this case, the copy is aborted because smith does not have write permission to <library>. the 
decomposition of a user operation into elementary actions has three advantages: 
1.   because objects are the protectable entities in a system, the use of elementary actions enables an 
audit of all behavior affecting an object. thus, the system can detect attempted subversions of access 
2.   single-object, single-action audit records simplify the model and the implementation. 
3.   because of the simple, uniform structure of the detection-specific audit records, it may be 
relatively easy to obtain this information or at least part of it by a straightforward mapping from 
existing native audit records to the detection-specific audit records. 
statistical  anomaly detection: 
as was mentioned, statistical anomaly detection techniques fall into two broad categories: threshold 
detection and profile-based systems. threshold detection involves counting the number of 
occurrences of a specific event type over an interval of time. if the count surpasses what is considered a 
reasonable number that one might expect to occur, then intrusion is assumed."
"threshold analysis, by itself, is a crude and ineffective detector of even moderately sophisticated 
attacks. both the threshold and the time interval must be determined. 
profile-based anomaly detection focuses on characterizing the past behavior of individual users or 
related groups of users and then detecting significant deviations. a profile may consist of a set of 
parameters, so that deviation on just a single parameter may not  be sufficient in itself to signal an 
alert. 
 
the foundation of this approach is an analysis of audit records. the audit records provide input to the 
intrusion detection function in two ways. first, the designer must decide on a number of quantitative 
metrics that can be used to measure user behavior. examples of metrics that are useful for profile-based 
intrusion detection are the following: 
 
   counter: a nonnegative integer that may be incremented but not decremented until it is reset 
by management action. typically, a count of certain event types is kept over a particular period of 
time. examples include the number of logins by a single user during an hour, the number of times a 
given command is executed during a single user session, and the number of password failures during 
a minute. 
   gauge: a nonnegative integer that may be incremented or decremented. typically, a gauge is 
used to measure the current value of some entity. examples include the number of logical 
connections assigned to a user application and the number of outgoing messages queued for a user 
process. 
   interval timer : the length of time between two related events. an example is the length 
of time between successive logins to an account. 
      resource utilization : quantity of resources consumed during a specified period. 
examples include the number of pages printed during a user session and total time consumed by a 
program execution.given these general metrics, various tests can be performed to determine whether 
current activity fits within acceptable limits. [ denn87 ] lists the following approaches that may be 
taken: 
 
      mean and standard deviation 
      multivariate 
      markov process 
      time series"
"operational 
the simplest statistical test is to measure the mean and standard deviation of a parameter over 
some historical period. this gives a reflection of the average behavior and its variability. 
a multivariate model is based on correlations between two or more variables.  intruder behavior may 
be characterized with greater confidence by considering such correlations (for example, processor time 
and resource usage, or login frequency and session elapsed time). 
a markov process model is used to establish transition probabilities among various states. as an 
example, this model might be used to look at transitions between certain commands. a time series 
model focuses on time intervals, looking for sequences of events that happen too rapidly or too 
slowly. a variety of statistical tests can be applied to characterize abnormal timing. finally, an 
operational model is based on a judgment of what is considered abnormal, rather than an automated 
analysis of past audit records. typically, fixed limits are defined and intrusion is suspected for an 
observation that is outside the limits. 
rule -based intrusion detection 
rule-based techniques detect intrusion by observing events in the system and applying a set of rules 
that lead to a decision regarding whether a given pattern of activity is or is not suspicious. rule-based 
anomaly detection is similar in terms of its approach and strengths to statistical anomaly detection. 
with the rule-based approach, historical audit records are analyzed to identify usage patterns and to 
generate automatically rules that describe those patterns. rules may represent past behavior pat -
terns of users, programs, privileges, time slots, terminals, and so on. current behavior is then 
observed, and each transaction is matched against the set of rules to determine if it conforms to any 
historically observed pattern of behavior. 
as with statistical anomaly detection, rule-based anomaly detection does not require knowledge of 
security vulnerabilities within the system. rather, the scheme is based on observing past behavior and, 
in effect, assuming that the future will be like the past 
rule-based  penetration  identification  takes  a  very  different  approach  to  intrusion detection, 
one based on expert system technology. the key feature of such systems is the use of rules for 
identifying known penetrations or penetrations that would exploit known weaknesses. 
example heuristics are the following:"
"1.   users should not read files in other users' personal directories. 
2.   users must not write other users' files. 
3.   users who log in after hours often access the same files they used earlier. 
4.   users do not generally open disk devices directly but rely on higher-level operating system 
utilities. 
5.   users should not be logged in more than once to the same system. 
6.   users do not make copies of system programs. 
the base-rate fallacy 
to be of practical use, an intrusion detection system should detect a substantial percentage of intrusions 
while keeping the false alarm rate at an acceptable level. if only a modest percentage of actual 
intrusions are detected, the system provides a false sense of security. on the other hand, if the system 
frequently triggers an alert when there is no intrusion (a false alarm), then either system managers will 
begin to ignore the alarms, or much time will be wasted analyzing the false alarms. 
unfortunately, because of the nature of the probabilities involved, it is very difficult to meet the 
standard of high rate of detections with a low rate of false alarms. in general, if the actual numbers of 
intrusions is low compared to the number of legitimate uses of a system, then the false alarm rate will 
be high unless the test is extremely discriminating. 
distributed  intrusion detection 
until recently, work on intrusion detection systems focused on single-system stand-alone facilities. the 
typical organization, however, needs to defend a distributed collection of hosts supported  by  a  lan  
porras  points  out  the  following  major  issues  in  the  design  of  a distributed intrusion detection 
s y s t e m  
a distributed intrusion detection system may need to deal with different audit record formats. 
in a heterogeneous environment, different systems will employ different native audit collection systems 
and, if using intrusion detection, may employ different formats for security-related audit records. 
one or more nodes in the network will serve as collection and analysis points for the data 
from the systems on the network. thus, either raw audit data or summary data must be transmitted 
across the network. therefore, there is a requirement to assure the integrity and confidentiality of 
these data. 
     either a centralized or decentralized architecture can be used. 
  host agent module: an audit collection module operating as a background process on a 
monitored system. its purpose is to collect data on security-related events on the host and transmit these"
"to the central manager. 
  lan monitor agent module: operates in the same fashion as a host agent module except that 
it analyzes lan traffic and reports the results to the central manager. 
     central manager module: receives reports from lan monitor and host agents and processes 
and correlates these reports to detect intrusion.  
a filter is applied that retains only those records that are of security interest. 
these records are then reformatted into a standardized format referred to as the host audit record 
(har). 
next, a template-driven logic module analyzes the records for suspicious activity. 
at the lowest level, the agent scans for notable events that are of interest independent of any past 
events. 
examples include failed file accesses, accessing system files, and changing a file's access control. 
at the next higher level, the agent looks for sequences of events, such as known attack 
patterns (signatures). 
finally, the agent looks for anomalous behavior of an individual user based on a historical profile of 
that user, such as number of programs executed, number of files accessed, and the like. 
when suspicious activity is detected, an alert is sent to the central manager. 
the  central  manager  includes  an  expert  system  that  can  draw  inferences  from received data. 
the manager may also query individual systems for copies of hars to correlate with those from 
other agents. 
the lan monitor agent also supplies information to the central manager. 
the lan monitor agent audits host-host connections, services used, and volume of traffic. 
it  searches for significant events, such as sudden changes in network load, the use of security-
related services, and network activities such as rlogin. 
the architecture depicted in  figures 18.2 and  18.3 is quite general and flexible. it offers a 
foundation for a machine-independent approach that can expand from stand-alone intrusion detection to 
a system that is able to correlate activity from a number of sites and networks to detect suspicious 
activity that would otherwise remain undetected. 
honeypots  
a relatively recent innovation in intrusion detection technology is the honeypot. honeypots are decoy 
systems that are designed to lure a potential attacker away from critical systems. honeypots are 
designed to"
"divert an attacker from accessing critical systems 
      collect information about the attacker's activity 
   encourage  the  attacker  to  stay  on  the  system  long  enough  for  administrators  to respond 
these systems are filled with fabricated information designed to appear valuable but that a legitimate 
user of the system wouldn’t access.  thus, any access to the honeypot is suspect."
"intrusion  detection exchange format 
to facilitate the development of distributed intrusion detection systems that can function across a 
wide range of platforms and environments, standards are needed to support interoperability.  such 
standards are the focus of the ietf intrusion detection working group. the outputs of this 
working group include the following: 
1.  a requirements document, which describes the high-level functional requirements for 
communication between intrusion detection systems and with management systems, including the 
rationale for those requirements. 
2.   a common intrusion language specification, which describes data formats that satisfy the 
requirements. 
3. a framework document, which identifies existing protocols best used for communication 
between intrusion detection systems, and describes how the devised data formats relate to them.  
firewalls  
firewall design principles  
internet connectivity is no longer an option for most organizations. however, while internet 
access provides benefits to the organization, it enables the outside world to reach and interact with 
local network assets. this creates the threat to the organization. while it is possible to equip each 
workstation and server on the premises network with strong security features, such as intrusion 
protection, this is not a practical approach. the alternative, increasingly accepted, is the firewall. 
the firewall is inserted between the premise network and internet to establish a controlled link and 
to erect an outer security wall or perimeter. the aim of this perimeter is to protect the premises 
network from internet based attacks and to provide a single choke point where security and audit 
can be imposed. the firewall can be a single computer system or a set of two or more systems that 
cooperate to perform the firewall function. 
firewall characteristics:  
    all traffic from inside to outside, and vice versa, must pass through the firewall. 
this is achieved by physically blocking all access to the local network except via the firewall. 
various configurations are possible. 
only authorized traffic, as defined by the local security policy, will be allowed to pass.  
various types of firewalls are used, which implement various types of security policies."
"the firewall itself is immune to penetration. this implies that use of a trusted system 
with a secure operating system. this implies that use of a trusted system with a secure operating 
system. 
four techniques that firewall use to control access and enforce the site’s security policy is as 
follows: 
  service control – determines the type of internet services that can be accessed, inbound 
or outbound. the firewall may filter traffic on this basis of ip address and tcp port number; 
may provide proxy software that receives and interprets each service request before passing it on; 
or may host the server software itself, such as web or mail service. 
  direction control – determines the direction in which particular service request may be 
initiated and allowed to flow through the firewall. 
  user control – controls access to a service according to which user is attempting to 
access it. 
     behavior control – controls how particular services are used. 
capabilities of firewall  
  a firewall defines a single choke point that keeps unauthorized users out of the protected 
network, prohibits potentially vulnerable services from entering or leaving the network, and 
provides protection from various kinds of ip spoofing and routing attacks. 
  a firewall provides a location for monitoring security related events. audits and alarms can 
be implemented on the firewall system. 
  a firewall is a convenient platform for several internet functions that are not security 
related.  
     a firewall can serve as the platform for ipsec. 
limitations of firewall  
  the  firewall  cannot  protect  against  attacks  that  bypass  the  firewall.  internal systems 
may have dial-out capability to connect to an isp. an internal lan may support a modem pool 
that provides dial-in capability for traveling employees and telecommuters. 
  the firewall does not protect against internal threats. the firewall does not protect against 
internal threats, such as a disgruntled employee or an employee who unwittingly cooperates 
with an external attacker. 
     the firewall cannot protect against the transfer of virus-infected programs or files. 
because of the variety of operating systems and applications supported inside the perimeter, it 
would be impractical and perhaps impossible for the firewall to scan all incoming files, e-mail, and"
"messages for viruses. 
 
types of firewalls  
there are 3 common types of firewalls. 
     packet filters 
     application-level gateways 
     circuit-level gateways 
packet filtering router  
a packet filtering router applies a set of rules to each incoming ip packet and then forwards or 
discards the packet. the router is typically configured to filter packets going in both directions. 
filtering rules are based on the information contained in a network packet: 
     source ip address – ip address of the system that originated the ip packet. 
 
     destination ip address – ip address of the system, the ip is trying to reach. 
     source and destination transport level address – transport level port number. 
     ip protocol field – defines the transport protocol. 
  interface – for a router with three or more ports, which interface of the router the packet 
come from or which interface of the router the packet is destined for. 
 
 
 
 
 
 
 
 
 
the packet filter is typically set up as a list of rules based on matches to fields in the ip or tcp 
header. if there is a match to one of the rules, that rule is invoked to determine whether to forward 
or discard the packet. if there is no match to any rule, then a default action is taken. 
two default policies are possible: 
 
     default = discard: that which is not expressly permitted is prohibited."
"default = forward: that which is not expressly prohibited is permitted. 
the default discard policy is the more conservative. initially everything is blocked, and services 
must be added on a case-by-case basis. this policy is more visible to users, who are most  likely 
to  see the firewall  as  a  hindrance.  the  default  forward policy increases ease of use for end 
users but provides reduced security. 
advantages of packet filter router  
    simple 
    transparent to users 
    very fast 
weakness of packet filter firewalls  
because  packet  filter  firewalls  do  not  examine  upper-layer  data,  they cannot prevent 
attacks that employ application specific vulnerabilities or functions. 
because  of  the  limited  information  available  to  the  firewall,  the  logging 
functionality present in packet filter firewall is limited. 
    it does not support advanced user authentication schemes. 
    they are generally vulnerable to attacks such as layer address spoofing. 
some of the attacks that can be made on packet filtering routers and the appropriate counter 
measures are the following: 
ip a d d r e s s  s p o o f i n g  –   
the intruders transmit packets from the outside with a source ip address field containing an 
address of an internal host. 
countermeasure: to discard packet with an inside source address if the packet arrives on an 
external interface. 
source routing attacks – the source station specifies the route that a packet should take as 
it crosses the internet; i.e., it will bypass the firewall. 
countermeasure: to discard all packets that uses this option. 
tiny fragment attacks – the intruder create extremely small fragments and force the tcp 
header information into a separate packet fragment. the attacker hopes that only the first fragment 
is examined and the remaining fragments are passed through. 
countermeasure: to discard all packets where the protocol type is tcp and the ip  
fragment offset is equal to 1."
"application level gateway  
an application level  gateway,  also called a proxy server, acts as  a relay of application level 
traffic. the user contacts the gateway using a tcp/ip application, such as telnet or ftp, and the 
gateway asks the user for the name of the remote host to be accessed. when the user responds and 
provides a valid user id and authentication information, the gateway contacts the application on the 
remote host and relays tcp segments containing the application data between the two endpoints. 
application level gateways tend to be more secure than packet filters. it is easy to log and audit all 
incoming traffic at the application level. a prime disadvantage is the additional processing 
overhead on each connection. 
 
 
 
 
 
 
 
 
 
 
 
circuit level gateway  
 
circuit level gateway can be a stand-alone system or it can be a specified function performed by an 
application level gateway for certain applications. a circuit level gateway does not permit an end-
to-end tcp connection; rather, the gateway sets up two tcp connections, one between itself and a 
tcp user on an inner host and one between itself and a tcp user on an outer host. once the two 
connections are established, the gateway typically relays tcp segments from one connection to the 
other without examining the contents. the security function consists of determining which 
connections will be allowed. 
a typical use of circuit level gateways is a situation in which the system administrator trusts the 
internal users. the gateway can be configured to support application level or proxy service on 
inbound connections and circuit level functions for outbound connections."
"basiton host  
it is a system identified by the firewall administrator as a critical strong point in the network’s 
security. the bastion host serves as a platform for an application level and circuit level gateway. 
common characteristics of a basiton host are as follows: 
  the bastion host hardware platform executes a secure version of its operating system, 
making it a trusted system. 
  only the services that the network administrator considers essential are installed on the 
bastion host. 
  it may require additional authentication before a user is allowed access to the proxy 
services. 
     each  proxy  is  configured  to  support  only  a  subset  of  standard  application’s command 
set. 
     each proxy is configured to allow access only to specific host systems. 
  each  proxy  maintains  detailed  audit  information  by  logging  all  traffic,  each 
connection and the duration of each connection. 
     each proxy is independent of other proxies on the bastion host. 
  a  proxy  generally  performs  no  disk  access  other  than  to  read  its  initial 
configuration file. 
     each proxy runs on a non-privileged user in a private and secured directory on the 
bastion host."
"firewall  configurations 
there are 3 common firewall configurations. 
1. screened host firewall, single-homed basiton configuration  
in this configuration, the firewall consists of two systems: a packet filtering router and a bastion 
host. typically, the router is configured so that 
for traffic from the internet, only ip packets destined for the basiton host are allowed 
in. 
for traffic from the internal network, only ip packets from the basiton host are allowed 
out. 
the basiton host performs authentication and proxy functions. this configuration has greater 
security than simply a packet filtering router or an application level gateway alone, for two 
reasons: 
this configuration implements both packet level and application level filtering, allowing 
for considerable flexibility in defining security policy. 
an intruder must generally penetrate two separate systems before the security of the 
internal network is compromised."
"2. screened host firewall, dual homed basiton configuration  
in the previous configuration, if the packet filtering router is compromised, traffic could flow 
directly through the router between the internet and the other hosts on the private network. this 
configuration physically prevents such a security break. 
 
 
 
 
 
 
 
 
 
 
 
3. screened subnet firewall configuration  
in this configuration, two packet filtering routers are used, one between the basiton host and  
internet  and  one  between  the  basiton  host  and  the  internal  network.  this configuration 
creates an isolated subnetwork, which may consist of simply the basiton host but may also 
include one or more information servers and modems for dial-in capability. typically both the 
internet and the internal network have access to hosts on the screened subnet, but traffic across 
the screened subnet is blocked. this configuration offers several advantages: 
     there are now three levels of defense to thwart intruders. 
  the outside router advertises only the existence of the screened subnet to the internet; 
therefore the internal network is invisible to the internet. 
  similarly, the inside router advertises only the existence of the screened subnet to the  internal  
network;  therefore  the  systems  on  the  internal  network  cannot construct direct routes to the 
internet."
"trusted systems  
 
one way to  enhance the ability of a system  to  defend  against  intruders and malicious 
programs is to implement trusted system technology. 
 
 
data access control  
following successful logon, the user has been granted access to one or set of hosts and applications. 
this is generally not sufficient for a system that includes sensitive data in its database. through 
the user access control procedure, a user can be identified to the system.  associated with  each  
user, there can  be a profile that  specifies  permissible operations and file accesses. the 
operating system can then enforce rules based on the user profile. the database management 
system, however, must control access to specific records or even portions of records. the operating 
system may grant a user permission to access a file or use an application, following which there are 
no further security checks, the  database  management  system  must  make  a  decision  on  each  
individual  access attempt. that decision will depend not only on the user’s identity but also on the 
specific parts of the data being accessed and even on the information already divulged to the user. 
a general model of access control as exercised by an file or database management system is that of 
an access matrix. the basic elements of the model are as follows: 
  subject : an entity capable of accessing objects. generally, the concept of subject equates 
with that of process. 
  object : anything to which access is controlled. examples include files, portion of files, 
programs, and segments of memory. 
  access right: the way in which the object is accessed by a subject. examples are read, 
write and execute."
"one axis of the matrix consists of identified subjects that may attempt data access. typically, this 
list will consist of individual users or user groups. the other axis lists the objects that may be 
accessed. objects may be individual data fields. each entry in the matrix indicates the access rights 
of that subject for that object. the matrix may be decomposed by columns, yielding access control 
lists. thus, for each object, an access control list lists users and their permitted access rights. 
the access control list may contain a default, or public, entry. 
 
a. access matrix  
access control list for program1:  
process1 (read, execute) 
access control list for segment a:  
process1 (read, write) 
access control list for segment b:  
process2 (read)  
b. access control list  
capability list for process1: program1 (read, execute) segment a (read) 
capability list for process2:  
segment b (read) 
c. capability list  
decomposition by rows yields capability tickets . a capability ticket specifies authorized objects 
and operations for a user. each user has a number of tickets and may be authorized to loan or give 
them to others. because tickets may be dispersed around the system, they present a greater security 
problem than access control lists. in particular, the ticket must be unforgeable. one way to 
accomplish this is to have the operating system hold all tickets on behalf of users. these tickets 
would have to be held in a region of memory inaccessible to users. 
 
the concept of trusted systems  
when multiple categories or levels of data are defined, the requirement is referred to as multilevel 
security. the general statement of the requirement for multilevel security is that a subject at a high 
level may not convey information to a subject at a lower or noncomparable level unless that flow 
accurately reflects the will of an authorized user. for implementation purposes, this requirement 
is in two parts and is simply stated. a multilevel secure system must enforce: 
  no read up: a subject can only read an object of less or equal security level. this is"
"referred to as simple security property.  
  no write down: a subject can only write into an object of greater or equal security 
level. this is referred to as *-property (star property).  
these two rules, if properly enforced, provide multilevel security. 
 
reference monitor concept  
the reference monitor is a controlling element in the hardware and operating system of a 
computer that regulates the access of subjects to objects on the basis of 
security parameters of the subject and object. the reference monitor has access to a file, known as 
the security kernel database that lists the access privileges (security clearance) of each subject and 
the protection attributes (classification level) of each object. the reference monitor enforces the 
security rules and has the following properties: 
  complete mediation: the security rules are enforced on every access, not just, fr 
example, when a file is opened. 
  isolation: the reference monitor and database are protected from unauthorised 
modification. 
  verifiability: the reference monitor’s correctness must be provable. that is, it must  be  
possible  to  demonstrate  mathematically  that  the  reference  monitor enforces the security rules 
and provides complete mediation and isolation. important    security    events,    such    as    
detected    security    violations    and 
authorized changes to the security kernel database, are stored in the audit file."
"fig: reference monitor concept  
viruses  and related threats 
perhaps the most sophisticated types of threats to computer systems are presented by programs that 
exploit vulnerabilities in computing systems. 
malicious programs  
name  description  
virus attaches itself to a program and propagates copies of itself to other 
programs 
worm program that propagates copies of itself to other computers 
logic bomb triggers action when condition occurs"
"trojan horse program that contains unexpected additional functionality 
backdoor 
 
(trapdoo r) program    modification    that    allows    unauthorized    access    to 
functionality 
exploits code specific to a single vulnerability or set of vulnerabilities 
downloaders program that installs other items on a machine that is under attac k. 
usually, a downloader is sent in an e-mail. 
auto-rooter malicious hacker tools used to break into new machines remotely 
kit             (vir us 
generator) set of tools for generating new viruses automatically 
spammer 
programs used to send large volumes of unwanted e-mail 
flooders used to attack networked computer systems with a large volume o f 
traffic to carry out a denial of service (dos) attack 
keyloggers captures keystrokes on a compromised system 
rootkit set of hacker tools used after attacker has broken into a compute r 
system and gained root-level access 
zombie program activated on an infected machine that is activated to launc h 
attacks on other machines 
 
 
malicious software can be divided into two categories: those that need a host program, and those 
that are independent.  
the former are essentially fragments of programs that cannot exist independently of some actual 
application program, utility, or system program. viruses, logic bombs, and backdoors are 
examples. the latter are self-contained programs that can be scheduled and run by the operating 
system. worms and zombie programs are examples. 
the nature of viruses"
"a virus is a  piece of  software  that  can  ""infect"" other programs  by modifying them;  the 
modification includes a copy of the virus program, which can then go on to infect other programs. 
a virus can do anything that other programs do. the only difference is that it attaches itself to 
another program and executes secretly when the host program is run. once a virus is executing, it 
can perform any function, such as erasing files and programs. 
during its lifetime, a typical virus goes through the following four phases: 
   dormant phase : the virus is idle. the virus will eventually be activated by some 
event, such as a date, the presence of another program or file, or the capacity of the disk exceeding 
some limit. not all viruses have this stage. 
   propagation phase: the virus places an identical copy of itself into other programs or 
into certain system areas on the disk. each infected program will now contain a clone of the 
virus, which will itself enter a propagation phase. 
   triggering phase: the virus is activated to perform the function for which it was 
intended. as with the dormant phase, the triggering phase can be caused by a variety of system 
events, including a count of the number of times that this copy of the virus has made copies of 
itself. 
   execution phase: the function is performed. the function may be harmless, such as a 
message on the screen, or damaging, such as the destruction of programs and data files. 
virus structure  
 
a virus can be prepended or postpended to an executable program, or it can be embedded in some 
other fashion. the key to its operation is that the infected program, when invoked, will first execute 
the virus code and then execute the original code of the program. 
an infected program begins with the virus code and works as follows.  
the first line of code is a jump to the main virus program. the second line is a special marker 
that is used by the virus to determine whether or not a potential victim program has already 
been infected with this virus.  
when the program is invoked, control is immediately transferred to the main virus program. the 
virus program first seeks out uninfected executable files and infects them. next, the virus may 
perform some action, usually detrimental to the system. 
this action could be performed every time the program is invoked, or it could be a logic bomb that 
triggers only under certain conditions."
"finally, the virus transfers control to the original program. if the infection phase of the program is 
reasonably rapid, a user is unlikely to notice any difference between the execution of an infected 
and uninfected program. 
 
a virus such as the one just described is easily detected because an infected version of a program is 
longer than the corresponding uninfected one. a way to thwart such a simple means of detecting a 
virus is to compress the executable file so that both the infected and uninfected versions are of 
identical length.. the key lines in this virus are numbered, and  figure 19.3 [cohe94 ] 
illustrates the operation. we assume that program p 1 is infected with the virus cv. when this 
program is invoked, control passes to its virus, which performs the following steps: 
1. for each uninfected file p 2 that is found, the virus first compresses that file to produce p' 2, 
which is shorter than the original program by the size of the virus. 
2.   a copy of the virus is prepended to the compressed program. 
3.   the compressed version of the original infected program, p' 1, is uncompressed. 
4.   the uncompressed original program is executed.    
in this example, the virus does nothing other than propagate. as in the previous example, the virus 
may include a logic bomb. 
initial infection  
once a virus has gained entry to a system by infecting a single program, it is in a position to infect 
some or all other executable files on that system when the infected program executes. thus, viral 
infection can be completely prevented by preventing the virus from gaining entry in the first place. 
unfortunately, prevention is extraordinarily difficult because a virus can be part of any program 
outside a system. thus, unless one is content to take an absolutely bare piece of 
iron and write all one's own system and application programs, one is vulnerable."
"types of viruses  
  
following categories as being among the most significant types of viruses: 
 
 
   parasitic virus : the traditional and still most common form of virus. a parasitic virus 
attaches itself to executable files and replicates, when the infected program is executed, by finding 
other executable files to infect. 
      memory-resident virus : lodges in main memory as part of a resident system program. 
 
from that point on, the virus infects every program that executes. 
 
   boot sector virus : infects a master boot record or boot record and spreads when a 
system is booted from the disk containing the virus. 
   stealth virus : a form of virus explicitly designed to hide itself from detection by 
antivirus software. 
      polymorphic virus : a virus that mutates with every infection, making detection by the 
 
""signature"" of the virus impossible. 
 
   metamorphic virus : as with a polymorphic virus, a metamorphic virus mutates with 
every infection. the difference is that a metamorphic virus rewrites itself completely at each 
iteration, increasing the difficulty of detection. metamorphic viruses my change their behavior as 
well as their appearance."
"one example of a stealth virus was discussed earlier: a virus that uses compression so that the 
infected program is exactly the same length as an uninfected version. far more sophisticated 
techniques are possible. for example, a virus can place intercept logic in disk i/o routines, so that 
when there is an attempt to read suspected portions of the disk using these routines, the virus will 
present back the original, uninfected program. 
 
a polymorphic virus creates copies during replication that are functionally equivalent but 
have distinctly different bit patterns. 
 
macro viruses  
in the mid-1990s, macro viruses became by far the most prevalent type of virus. macro viruses are 
particularly threatening for a number of reasons: 
 
1.   a macro virus is platform independent.  virtually all of the macro viruses infect microsoft 
word documents. any hardware platform and operating system that supports word can be infected. 
2.   macro viruses infect documents, not executable portions of code.  most of 
the information introduced onto a computer system is in the form of a document rather than a 
program. 
3.   macro viruses are easily spread. a very common method is by electronic mail. 
macro viruses take advantage of a feature found in word and other office applications such as 
microsoft excel, namely the macro. in essence, a macro is an executable program embedded in a 
word processing document or other type of file. typically, users employ macros to automate 
repetitive tasks and thereby save keystrokes. the macro language is usually some form of the basic 
programming language. a user might define a sequence of keystrokes in a macro and set it up so 
that the macro is invoked when a function key or special short combination of keys is input. 
successive releases of word provide increased protection against macro viruses. for example, 
microsoft offers an optional macro virus protection tool that detects suspicious word files and 
alerts the customer to the potential risk of opening a file with macros. various antivirus 
product vendors have also developed tools to detect and correct macro viruses. 
 
 
 
e-mail viruses"
"a  more  recent  development  in  malicious  software  is  the  e-mail  virus.  the  first  rapidly 
spreading e-mail viruses, such as melissa, made use of a microsoft word macro embedded in an 
attachment. if the recipient opens the e-mail attachment, the word macro is activated. then 
 
1.   the  e-mail  virus  sends  itself  to  everyone  on  the  mailing  list  in  the  user's  e-mail 
package. 
 
2.   the virus does local damage. 
worms  
a worm is a program that can replicate itself and send copies from computer to computer 
across  network  connections.  upon  arrival,  the  worm  may  be  activated  to  replicate  and 
propagate again. 
 
network worm programs use network connections to spread from system to system. once 
active within a system, a network worm can behave as a computer virus or bacteria, or it could 
implant trojan horse programs or perform any number of disruptive or destructive actions. 
 
to replicate itself, a network worm uses some sort of network vehicle. examples include the 
following: 
 
      electronic mail facility: a worm mails a copy of itself to other systems. 
 
      remote execution capability: a worm executes a copy of itself on another system. 
 
   remote login capability: a worm logs onto a remote system as a user and then uses 
commands to copy itself from one system to the other. 
 
the new copy of the worm program is then run on the remote system where, in addition to any 
functions that it performs at that system, it continues to spread in the same fashion. 
 
a network worm exhibits the same characteristics as a computer virus: a dormant phase, a 
propagation  phase,  a  triggering  phase,  and  an  execution  phase.  the  propagation  phase"
"generally performs the following functions: 
 
1. search for other systems to infect by examining host tables or similar repositories of 
remote system addresses. 
2.   establish a connection with a remote system. 
3.   copy itself to the remote system and cause the copy to be run. 
as with viruses, network worms are difficult to counter. 
the morris worm  
the morris worm was designed to spread on unix systems and used a number of different 
techniques for propagation. 
1.   it attempted to log on to a remote host as a legitimate user. in this method, the worm first 
attempted to crack the local password file, and then used the discovered passwords and 
corresponding user ids. the assumption was that many users would use the same password on 
different systems. to obtain the passwords, the worm ran a password- cracking program that tried 
a.   each user's account name and simple permutations of it 
b.   a list of 432 built-in passwords that morris thought to be likely candidates c.   all the words in 
the local system directory 
2.   it exploited a bug in the finger protocol, which reports the whereabouts of a remote user. 
3.   it exploited a trapdoor in the debug option of the remote process that receives and sends mail. 
if  any of these  attacks  succeeded,  the  worm  achieved  communication  with  the operating 
system command interpreter. 
recent worm attacks  
in late 2001, a more versatile worm appeared, known as nimda. nimda spreads by multiple 
mechanisms: 
      from client to client via e-mail 
      from client to client via open network shares 
      from web server to client via browsing of compromised web sites 
      from client to web server via active scanning for and exploitation of various microsoft 
iis 4.0 / 5.0 directory traversal vulnerabilities 
      from client to web server via scanning for the back doors left behind by the ""code red 
ii"" worms 
the worm modifies web documents (e.g., .htm, .html, and .asp files) and certain executable files 
found on the systems it infects and creates numerous copies of itself under various filenames."
"in early 2003, the sql slammer worm appeared. this worm exploited a buffer overflow 
vulnerability in microsoft sql server. 
mydoom is a mass-mailing e-mail worm that appeared in 2004  
 
the ideal solution to the threat of viruses is prevention: the next best approach is to be able to do 
the following: 
   detection: once the infection has occurred, determine that it has occurred and locate the 
virus. 
   identification : once detection has been achieved, identify the specific virus that has 
infected a program. 
   removal : once the specific virus has been identified, remove all traces of the virus 
from the infected program and restore it to its original state. remove the virus from all infected 
systems so that the disease cannot spread further. 
if detection succeeds but either identification or removal is not possible, then the alternative is to 
discard the infected program and reload a clean backup version. 
there are four generations of antivirus software: 
      first generation: simple scanners 
      second generation: heuristic scanners  
      third generation: activity traps 
      fourth generation: full-featured protection 
 
a first-generation scanner requires a virus signature to identify a virus.. such signature- specific 
scanners are limited to the detection of known viruses. another type of first-generation scanner 
maintains a record of the length of programs and looks for changes in length. 
 
a second-generation scanner does not rely on a specific signature. rather, the scanner uses 
heuristic rules to search for probable virus infection. one class of such scanners looks for fragments 
of code that are often associated with viruses. 
 
another second-generation approach is integrity checking. a checksum can be appended to 
each program. if a virus infects the program without changing the checksum, then an integrity 
check will catch the change. to counter a virus that is sophisticated enough to change the checksum"
"when it infects a program, an encrypted hash function can be used. the encryption key is stored 
separately from the program so that the virus cannot generate a new hash code and  encrypt  that.  
by using a hash  function  rather than a simpler checksum,  the virus  is prevented from 
adjusting the program to produce the same hash code as before. 
 
third-generation programs are memory-resident programs that identify a virus by its actions 
rather than its structure in an infected program. such programs have the advantage that it is not 
necessary  to  develop  signatures  and  heuristics  for  a  wide  array  of  viruses.  rather,  it  is 
necessary only to identify the small set of actions that indicate an infection is being attempted and 
then to intervene. 
 
fourth-generation products are packages consisting of a variety of antivirus techniques used in 
conjunction. these include scanning and activity trap components. in  addition, such a 
package includes access control capability, which limits the ability of viruses to penetrate a system 
and then limits the ability of a virus to update files in order to pass on the infection. 
 
the arms race continues. with fourth-generation packages, a more comprehensive defense strategy 
is employed, broadening the scope of defense to more general-purpose computer security measures. 
advanced antivirus techniques  
more sophisticated antivirus approaches and products continue to appear. in this subsection, we 
highlight two of the most important. 
generic decryption  
 
generic decryption (gd) technology enables the antivirus program to easily detect even the most 
complex polymorphic viruses, while maintaining fast scanning speeds . in order to detect such a 
structure, executable files are run through a gd scanner, which contains the following elements: 
   cpu emulator: a software-based virtual computer. instructions in an executable file are 
interpreted by the emulator rather than executed on the underlying processor. the emulator 
includes software versions of all registers and other processor hardware, so that the underlying 
processor is unaffected by programs interpreted on the emulator. 
   virus signature scanner: a module that scans the target code looking for known virus 
signatures. 
      emulation control module: controls the execution of the target code."
"digital immune system  
the digital immune system is a comprehensive approach to virus protection developed by 
ibm]. the motivation for this development has been the rising threat of internet-based virus 
propagation.two major trends in internet technology have had an increasing impact on the rate of 
virus propagation in recent years: 
   integrated mail systems: systems such as lotus notes and microsoft outlook make it 
very simple to send anything to anyone and to work with objects that are received. 
   mobile-program systems: capabilities such as java and activex allow programs to 
move on their own from one system to another. 
 
1. a monitoring program on each pc uses a variety of heuristics based on system behavior, 
suspicious changes to programs, or family signature to infer that a virus may be present. the 
monitoring program forwards a copy of any program thought to be infected to an administrative 
machine within the organization. 
 
2. the administrative machine encrypts the sample and sends it to a central virus analysis 
machine. 
3. this machine creates an environment in which the infected program can be safely run for 
analysis.  techniques  used  for  this  purpose  include  emulation,  or  the  creation  of  a protected 
environment within which the suspect program can be executed and monitored. the virus analysis 
machine then produces a prescription for identifying and removing the virus. 
4.   the resulting prescription is sent back to the administrative machine. 
5.   the administrative machine forwards the prescription to the infected client. 
6.   the prescription is also forwarded to other clients in the organization. 
7. subscribers around the world receive regular antivirus updates that protect them from the 
new virus. 
the success of the digital immune system depends on the ability of the virus analysis machine to 
detect new and innovative virus strains. by constantly analyzing and monitoring the viruses found 
in the wild, it should be possible to continually update the digital immune software to keep up with 
the threat."
"behavior-software  
unlike heuristics or fingerprint-based scanners, behavior-blocking software integrates with the 
operating system of a host computer and monitors program behavior in real-time for malicious 
actions. monitored behaviors can include the following: 
 
      attempts to open, view, delete, and/or modify files; 
      attempts to format disk drives and other unrecoverable disk operations; 
      modifications to the logic of executable files or macros; 
      modification of critical system settings, such as start-up settings; 
      scripting of e-mail and instant messaging clients to send executable content; and 
      initiation of network communications. 
if the behavior blocker detects that a program is initiating would-be malicious behaviors as it runs, 
it can block these behaviors in real-time and/or terminate the offending software. this gives it a 
fundamental advantage over such established antivirus detection techniques as fingerprinting or 
heuristics."
